// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newAvtFile(db *gorm.DB, opts ...gen.DOOption) avtFile {
	_avtFile := avtFile{}

	_avtFile.avtFileDo.UseDB(db, opts...)
	_avtFile.avtFileDo.UseModel(&model.AvtFile{})

	tableName := _avtFile.avtFileDo.TableName()
	_avtFile.ALL = field.NewAsterisk(tableName)
	_avtFile.ID = field.NewInt64(tableName, "id")
	_avtFile.Name = field.NewString(tableName, "name")
	_avtFile.Size = field.NewInt64(tableName, "size")
	_avtFile.Type = field.NewString(tableName, "type")
	_avtFile.FilePath = field.NewString(tableName, "file_path")
	_avtFile.CreateTime = field.NewTime(tableName, "create_time")
	_avtFile.UpdateTime = field.NewTime(tableName, "update_time")
	_avtFile.IsDelete = field.NewString(tableName, "is_delete")
	_avtFile.UnitID = field.NewString(tableName, "unit_id")
	_avtFile.Status = field.NewString(tableName, "status")
	_avtFile.File = field.NewString(tableName, "file")

	_avtFile.fillFieldMap()

	return _avtFile
}

type avtFile struct {
	avtFileDo

	ALL        field.Asterisk
	ID         field.Int64  // 文件ID
	Name       field.String // 文件名
	Size       field.Int64  // 文件大小
	Type       field.String // 文件类型
	FilePath   field.String // 文件存储路径
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 修改时间
	/*
		删除标志
		1-删除
		0-未删除
	*/
	IsDelete field.String
	UnitID   field.String // 所属单位id
	Status   field.String // 文件状态
	File     field.String // 文件全名

	fieldMap map[string]field.Expr
}

func (a avtFile) Table(newTableName string) *avtFile {
	a.avtFileDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a avtFile) As(alias string) *avtFile {
	a.avtFileDo.DO = *(a.avtFileDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *avtFile) updateTableName(table string) *avtFile {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.Size = field.NewInt64(table, "size")
	a.Type = field.NewString(table, "type")
	a.FilePath = field.NewString(table, "file_path")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.IsDelete = field.NewString(table, "is_delete")
	a.UnitID = field.NewString(table, "unit_id")
	a.Status = field.NewString(table, "status")
	a.File = field.NewString(table, "file")

	a.fillFieldMap()

	return a
}

func (a *avtFile) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *avtFile) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["size"] = a.Size
	a.fieldMap["type"] = a.Type
	a.fieldMap["file_path"] = a.FilePath
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["is_delete"] = a.IsDelete
	a.fieldMap["unit_id"] = a.UnitID
	a.fieldMap["status"] = a.Status
	a.fieldMap["file"] = a.File
}

func (a avtFile) clone(db *gorm.DB) avtFile {
	a.avtFileDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a avtFile) replaceDB(db *gorm.DB) avtFile {
	a.avtFileDo.ReplaceDB(db)
	return a
}

type avtFileDo struct{ gen.DO }

type IAvtFileDo interface {
	gen.SubQuery
	Debug() IAvtFileDo
	WithContext(ctx context.Context) IAvtFileDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAvtFileDo
	WriteDB() IAvtFileDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAvtFileDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAvtFileDo
	Not(conds ...gen.Condition) IAvtFileDo
	Or(conds ...gen.Condition) IAvtFileDo
	Select(conds ...field.Expr) IAvtFileDo
	Where(conds ...gen.Condition) IAvtFileDo
	Order(conds ...field.Expr) IAvtFileDo
	Distinct(cols ...field.Expr) IAvtFileDo
	Omit(cols ...field.Expr) IAvtFileDo
	Join(table schema.Tabler, on ...field.Expr) IAvtFileDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAvtFileDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAvtFileDo
	Group(cols ...field.Expr) IAvtFileDo
	Having(conds ...gen.Condition) IAvtFileDo
	Limit(limit int) IAvtFileDo
	Offset(offset int) IAvtFileDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtFileDo
	Unscoped() IAvtFileDo
	Create(values ...*model.AvtFile) error
	CreateInBatches(values []*model.AvtFile, batchSize int) error
	Save(values ...*model.AvtFile) error
	First() (*model.AvtFile, error)
	Take() (*model.AvtFile, error)
	Last() (*model.AvtFile, error)
	Find() ([]*model.AvtFile, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtFile, err error)
	FindInBatches(result *[]*model.AvtFile, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AvtFile) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAvtFileDo
	Assign(attrs ...field.AssignExpr) IAvtFileDo
	Joins(fields ...field.RelationField) IAvtFileDo
	Preload(fields ...field.RelationField) IAvtFileDo
	FirstOrInit() (*model.AvtFile, error)
	FirstOrCreate() (*model.AvtFile, error)
	FindByPage(offset int, limit int) (result []*model.AvtFile, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAvtFileDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a avtFileDo) Debug() IAvtFileDo {
	return a.withDO(a.DO.Debug())
}

func (a avtFileDo) WithContext(ctx context.Context) IAvtFileDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a avtFileDo) ReadDB() IAvtFileDo {
	return a.Clauses(dbresolver.Read)
}

func (a avtFileDo) WriteDB() IAvtFileDo {
	return a.Clauses(dbresolver.Write)
}

func (a avtFileDo) Session(config *gorm.Session) IAvtFileDo {
	return a.withDO(a.DO.Session(config))
}

func (a avtFileDo) Clauses(conds ...clause.Expression) IAvtFileDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a avtFileDo) Returning(value interface{}, columns ...string) IAvtFileDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a avtFileDo) Not(conds ...gen.Condition) IAvtFileDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a avtFileDo) Or(conds ...gen.Condition) IAvtFileDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a avtFileDo) Select(conds ...field.Expr) IAvtFileDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a avtFileDo) Where(conds ...gen.Condition) IAvtFileDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a avtFileDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAvtFileDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a avtFileDo) Order(conds ...field.Expr) IAvtFileDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a avtFileDo) Distinct(cols ...field.Expr) IAvtFileDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a avtFileDo) Omit(cols ...field.Expr) IAvtFileDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a avtFileDo) Join(table schema.Tabler, on ...field.Expr) IAvtFileDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a avtFileDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAvtFileDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a avtFileDo) RightJoin(table schema.Tabler, on ...field.Expr) IAvtFileDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a avtFileDo) Group(cols ...field.Expr) IAvtFileDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a avtFileDo) Having(conds ...gen.Condition) IAvtFileDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a avtFileDo) Limit(limit int) IAvtFileDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a avtFileDo) Offset(offset int) IAvtFileDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a avtFileDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtFileDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a avtFileDo) Unscoped() IAvtFileDo {
	return a.withDO(a.DO.Unscoped())
}

func (a avtFileDo) Create(values ...*model.AvtFile) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a avtFileDo) CreateInBatches(values []*model.AvtFile, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a avtFileDo) Save(values ...*model.AvtFile) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a avtFileDo) First() (*model.AvtFile, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtFile), nil
	}
}

func (a avtFileDo) Take() (*model.AvtFile, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtFile), nil
	}
}

func (a avtFileDo) Last() (*model.AvtFile, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtFile), nil
	}
}

func (a avtFileDo) Find() ([]*model.AvtFile, error) {
	result, err := a.DO.Find()
	return result.([]*model.AvtFile), err
}

func (a avtFileDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtFile, err error) {
	buf := make([]*model.AvtFile, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a avtFileDo) FindInBatches(result *[]*model.AvtFile, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a avtFileDo) Attrs(attrs ...field.AssignExpr) IAvtFileDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a avtFileDo) Assign(attrs ...field.AssignExpr) IAvtFileDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a avtFileDo) Joins(fields ...field.RelationField) IAvtFileDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a avtFileDo) Preload(fields ...field.RelationField) IAvtFileDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a avtFileDo) FirstOrInit() (*model.AvtFile, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtFile), nil
	}
}

func (a avtFileDo) FirstOrCreate() (*model.AvtFile, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtFile), nil
	}
}

func (a avtFileDo) FindByPage(offset int, limit int) (result []*model.AvtFile, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a avtFileDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a avtFileDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a avtFileDo) Delete(models ...*model.AvtFile) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *avtFileDo) withDO(do gen.Dao) *avtFileDo {
	a.DO = *do.(*gen.DO)
	return a
}
