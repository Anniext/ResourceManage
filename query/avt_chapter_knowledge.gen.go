// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newAvtChapterKnowledge(db *gorm.DB, opts ...gen.DOOption) avtChapterKnowledge {
	_avtChapterKnowledge := avtChapterKnowledge{}

	_avtChapterKnowledge.avtChapterKnowledgeDo.UseDB(db, opts...)
	_avtChapterKnowledge.avtChapterKnowledgeDo.UseModel(&model.AvtChapterKnowledge{})

	tableName := _avtChapterKnowledge.avtChapterKnowledgeDo.TableName()
	_avtChapterKnowledge.ALL = field.NewAsterisk(tableName)
	_avtChapterKnowledge.ID = field.NewInt64(tableName, "id")
	_avtChapterKnowledge.ClassID = field.NewString(tableName, "class_id")
	_avtChapterKnowledge.ClassName = field.NewString(tableName, "class_name")
	_avtChapterKnowledge.BeginTime = field.NewInt64(tableName, "begin_time")
	_avtChapterKnowledge.EndTime = field.NewInt64(tableName, "end_time")
	_avtChapterKnowledge.Name = field.NewString(tableName, "name")
	_avtChapterKnowledge.BmpBase = field.NewString(tableName, "bmp_base")
	_avtChapterKnowledge.UpdateTime = field.NewTime(tableName, "update_time")
	_avtChapterKnowledge.KnowledgeID = field.NewString(tableName, "knowledge_id")
	_avtChapterKnowledge.Deleted = field.NewInt64(tableName, "deleted")

	_avtChapterKnowledge.fillFieldMap()

	return _avtChapterKnowledge
}

type avtChapterKnowledge struct {
	avtChapterKnowledgeDo

	ALL         field.Asterisk
	ID          field.Int64
	ClassID     field.String
	ClassName   field.String
	BeginTime   field.Int64
	EndTime     field.Int64
	Name        field.String
	BmpBase     field.String
	UpdateTime  field.Time
	KnowledgeID field.String
	Deleted     field.Int64 // 0-未删除；1-删除

	fieldMap map[string]field.Expr
}

func (a avtChapterKnowledge) Table(newTableName string) *avtChapterKnowledge {
	a.avtChapterKnowledgeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a avtChapterKnowledge) As(alias string) *avtChapterKnowledge {
	a.avtChapterKnowledgeDo.DO = *(a.avtChapterKnowledgeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *avtChapterKnowledge) updateTableName(table string) *avtChapterKnowledge {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ClassID = field.NewString(table, "class_id")
	a.ClassName = field.NewString(table, "class_name")
	a.BeginTime = field.NewInt64(table, "begin_time")
	a.EndTime = field.NewInt64(table, "end_time")
	a.Name = field.NewString(table, "name")
	a.BmpBase = field.NewString(table, "bmp_base")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.KnowledgeID = field.NewString(table, "knowledge_id")
	a.Deleted = field.NewInt64(table, "deleted")

	a.fillFieldMap()

	return a
}

func (a *avtChapterKnowledge) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *avtChapterKnowledge) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id"] = a.ID
	a.fieldMap["class_id"] = a.ClassID
	a.fieldMap["class_name"] = a.ClassName
	a.fieldMap["begin_time"] = a.BeginTime
	a.fieldMap["end_time"] = a.EndTime
	a.fieldMap["name"] = a.Name
	a.fieldMap["bmp_base"] = a.BmpBase
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["knowledge_id"] = a.KnowledgeID
	a.fieldMap["deleted"] = a.Deleted
}

func (a avtChapterKnowledge) clone(db *gorm.DB) avtChapterKnowledge {
	a.avtChapterKnowledgeDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a avtChapterKnowledge) replaceDB(db *gorm.DB) avtChapterKnowledge {
	a.avtChapterKnowledgeDo.ReplaceDB(db)
	return a
}

type avtChapterKnowledgeDo struct{ gen.DO }

type IAvtChapterKnowledgeDo interface {
	gen.SubQuery
	Debug() IAvtChapterKnowledgeDo
	WithContext(ctx context.Context) IAvtChapterKnowledgeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAvtChapterKnowledgeDo
	WriteDB() IAvtChapterKnowledgeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAvtChapterKnowledgeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAvtChapterKnowledgeDo
	Not(conds ...gen.Condition) IAvtChapterKnowledgeDo
	Or(conds ...gen.Condition) IAvtChapterKnowledgeDo
	Select(conds ...field.Expr) IAvtChapterKnowledgeDo
	Where(conds ...gen.Condition) IAvtChapterKnowledgeDo
	Order(conds ...field.Expr) IAvtChapterKnowledgeDo
	Distinct(cols ...field.Expr) IAvtChapterKnowledgeDo
	Omit(cols ...field.Expr) IAvtChapterKnowledgeDo
	Join(table schema.Tabler, on ...field.Expr) IAvtChapterKnowledgeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAvtChapterKnowledgeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAvtChapterKnowledgeDo
	Group(cols ...field.Expr) IAvtChapterKnowledgeDo
	Having(conds ...gen.Condition) IAvtChapterKnowledgeDo
	Limit(limit int) IAvtChapterKnowledgeDo
	Offset(offset int) IAvtChapterKnowledgeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtChapterKnowledgeDo
	Unscoped() IAvtChapterKnowledgeDo
	Create(values ...*model.AvtChapterKnowledge) error
	CreateInBatches(values []*model.AvtChapterKnowledge, batchSize int) error
	Save(values ...*model.AvtChapterKnowledge) error
	First() (*model.AvtChapterKnowledge, error)
	Take() (*model.AvtChapterKnowledge, error)
	Last() (*model.AvtChapterKnowledge, error)
	Find() ([]*model.AvtChapterKnowledge, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtChapterKnowledge, err error)
	FindInBatches(result *[]*model.AvtChapterKnowledge, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AvtChapterKnowledge) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAvtChapterKnowledgeDo
	Assign(attrs ...field.AssignExpr) IAvtChapterKnowledgeDo
	Joins(fields ...field.RelationField) IAvtChapterKnowledgeDo
	Preload(fields ...field.RelationField) IAvtChapterKnowledgeDo
	FirstOrInit() (*model.AvtChapterKnowledge, error)
	FirstOrCreate() (*model.AvtChapterKnowledge, error)
	FindByPage(offset int, limit int) (result []*model.AvtChapterKnowledge, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAvtChapterKnowledgeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a avtChapterKnowledgeDo) Debug() IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.Debug())
}

func (a avtChapterKnowledgeDo) WithContext(ctx context.Context) IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a avtChapterKnowledgeDo) ReadDB() IAvtChapterKnowledgeDo {
	return a.Clauses(dbresolver.Read)
}

func (a avtChapterKnowledgeDo) WriteDB() IAvtChapterKnowledgeDo {
	return a.Clauses(dbresolver.Write)
}

func (a avtChapterKnowledgeDo) Session(config *gorm.Session) IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.Session(config))
}

func (a avtChapterKnowledgeDo) Clauses(conds ...clause.Expression) IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a avtChapterKnowledgeDo) Returning(value interface{}, columns ...string) IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a avtChapterKnowledgeDo) Not(conds ...gen.Condition) IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a avtChapterKnowledgeDo) Or(conds ...gen.Condition) IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a avtChapterKnowledgeDo) Select(conds ...field.Expr) IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a avtChapterKnowledgeDo) Where(conds ...gen.Condition) IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a avtChapterKnowledgeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAvtChapterKnowledgeDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a avtChapterKnowledgeDo) Order(conds ...field.Expr) IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a avtChapterKnowledgeDo) Distinct(cols ...field.Expr) IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a avtChapterKnowledgeDo) Omit(cols ...field.Expr) IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a avtChapterKnowledgeDo) Join(table schema.Tabler, on ...field.Expr) IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a avtChapterKnowledgeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a avtChapterKnowledgeDo) RightJoin(table schema.Tabler, on ...field.Expr) IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a avtChapterKnowledgeDo) Group(cols ...field.Expr) IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a avtChapterKnowledgeDo) Having(conds ...gen.Condition) IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a avtChapterKnowledgeDo) Limit(limit int) IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a avtChapterKnowledgeDo) Offset(offset int) IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a avtChapterKnowledgeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a avtChapterKnowledgeDo) Unscoped() IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a avtChapterKnowledgeDo) Create(values ...*model.AvtChapterKnowledge) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a avtChapterKnowledgeDo) CreateInBatches(values []*model.AvtChapterKnowledge, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a avtChapterKnowledgeDo) Save(values ...*model.AvtChapterKnowledge) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a avtChapterKnowledgeDo) First() (*model.AvtChapterKnowledge, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtChapterKnowledge), nil
	}
}

func (a avtChapterKnowledgeDo) Take() (*model.AvtChapterKnowledge, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtChapterKnowledge), nil
	}
}

func (a avtChapterKnowledgeDo) Last() (*model.AvtChapterKnowledge, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtChapterKnowledge), nil
	}
}

func (a avtChapterKnowledgeDo) Find() ([]*model.AvtChapterKnowledge, error) {
	result, err := a.DO.Find()
	return result.([]*model.AvtChapterKnowledge), err
}

func (a avtChapterKnowledgeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtChapterKnowledge, err error) {
	buf := make([]*model.AvtChapterKnowledge, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a avtChapterKnowledgeDo) FindInBatches(result *[]*model.AvtChapterKnowledge, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a avtChapterKnowledgeDo) Attrs(attrs ...field.AssignExpr) IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a avtChapterKnowledgeDo) Assign(attrs ...field.AssignExpr) IAvtChapterKnowledgeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a avtChapterKnowledgeDo) Joins(fields ...field.RelationField) IAvtChapterKnowledgeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a avtChapterKnowledgeDo) Preload(fields ...field.RelationField) IAvtChapterKnowledgeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a avtChapterKnowledgeDo) FirstOrInit() (*model.AvtChapterKnowledge, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtChapterKnowledge), nil
	}
}

func (a avtChapterKnowledgeDo) FirstOrCreate() (*model.AvtChapterKnowledge, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtChapterKnowledge), nil
	}
}

func (a avtChapterKnowledgeDo) FindByPage(offset int, limit int) (result []*model.AvtChapterKnowledge, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a avtChapterKnowledgeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a avtChapterKnowledgeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a avtChapterKnowledgeDo) Delete(models ...*model.AvtChapterKnowledge) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *avtChapterKnowledgeDo) withDO(do gen.Dao) *avtChapterKnowledgeDo {
	a.DO = *do.(*gen.DO)
	return a
}
