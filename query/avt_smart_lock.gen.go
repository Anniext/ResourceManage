// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newAvtSmartLock(db *gorm.DB, opts ...gen.DOOption) avtSmartLock {
	_avtSmartLock := avtSmartLock{}

	_avtSmartLock.avtSmartLockDo.UseDB(db, opts...)
	_avtSmartLock.avtSmartLockDo.UseModel(&model.AvtSmartLock{})

	tableName := _avtSmartLock.avtSmartLockDo.TableName()
	_avtSmartLock.ALL = field.NewAsterisk(tableName)
	_avtSmartLock.ID = field.NewInt64(tableName, "id")
	_avtSmartLock.BuildingID = field.NewInt64(tableName, "building_id")
	_avtSmartLock.FloorID = field.NewInt64(tableName, "floor_id")
	_avtSmartLock.RoomID = field.NewInt64(tableName, "room_id")
	_avtSmartLock.UnitNo = field.NewString(tableName, "unit_no")
	_avtSmartLock.LockID = field.NewString(tableName, "lock_id")
	_avtSmartLock.LockName = field.NewString(tableName, "lock_name")

	_avtSmartLock.fillFieldMap()

	return _avtSmartLock
}

type avtSmartLock struct {
	avtSmartLockDo

	ALL        field.Asterisk
	ID         field.Int64
	BuildingID field.Int64
	FloorID    field.Int64
	RoomID     field.Int64
	UnitNo     field.String
	LockID     field.String
	LockName   field.String

	fieldMap map[string]field.Expr
}

func (a avtSmartLock) Table(newTableName string) *avtSmartLock {
	a.avtSmartLockDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a avtSmartLock) As(alias string) *avtSmartLock {
	a.avtSmartLockDo.DO = *(a.avtSmartLockDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *avtSmartLock) updateTableName(table string) *avtSmartLock {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.BuildingID = field.NewInt64(table, "building_id")
	a.FloorID = field.NewInt64(table, "floor_id")
	a.RoomID = field.NewInt64(table, "room_id")
	a.UnitNo = field.NewString(table, "unit_no")
	a.LockID = field.NewString(table, "lock_id")
	a.LockName = field.NewString(table, "lock_name")

	a.fillFieldMap()

	return a
}

func (a *avtSmartLock) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *avtSmartLock) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["building_id"] = a.BuildingID
	a.fieldMap["floor_id"] = a.FloorID
	a.fieldMap["room_id"] = a.RoomID
	a.fieldMap["unit_no"] = a.UnitNo
	a.fieldMap["lock_id"] = a.LockID
	a.fieldMap["lock_name"] = a.LockName
}

func (a avtSmartLock) clone(db *gorm.DB) avtSmartLock {
	a.avtSmartLockDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a avtSmartLock) replaceDB(db *gorm.DB) avtSmartLock {
	a.avtSmartLockDo.ReplaceDB(db)
	return a
}

type avtSmartLockDo struct{ gen.DO }

type IAvtSmartLockDo interface {
	gen.SubQuery
	Debug() IAvtSmartLockDo
	WithContext(ctx context.Context) IAvtSmartLockDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAvtSmartLockDo
	WriteDB() IAvtSmartLockDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAvtSmartLockDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAvtSmartLockDo
	Not(conds ...gen.Condition) IAvtSmartLockDo
	Or(conds ...gen.Condition) IAvtSmartLockDo
	Select(conds ...field.Expr) IAvtSmartLockDo
	Where(conds ...gen.Condition) IAvtSmartLockDo
	Order(conds ...field.Expr) IAvtSmartLockDo
	Distinct(cols ...field.Expr) IAvtSmartLockDo
	Omit(cols ...field.Expr) IAvtSmartLockDo
	Join(table schema.Tabler, on ...field.Expr) IAvtSmartLockDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAvtSmartLockDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAvtSmartLockDo
	Group(cols ...field.Expr) IAvtSmartLockDo
	Having(conds ...gen.Condition) IAvtSmartLockDo
	Limit(limit int) IAvtSmartLockDo
	Offset(offset int) IAvtSmartLockDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtSmartLockDo
	Unscoped() IAvtSmartLockDo
	Create(values ...*model.AvtSmartLock) error
	CreateInBatches(values []*model.AvtSmartLock, batchSize int) error
	Save(values ...*model.AvtSmartLock) error
	First() (*model.AvtSmartLock, error)
	Take() (*model.AvtSmartLock, error)
	Last() (*model.AvtSmartLock, error)
	Find() ([]*model.AvtSmartLock, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtSmartLock, err error)
	FindInBatches(result *[]*model.AvtSmartLock, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AvtSmartLock) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAvtSmartLockDo
	Assign(attrs ...field.AssignExpr) IAvtSmartLockDo
	Joins(fields ...field.RelationField) IAvtSmartLockDo
	Preload(fields ...field.RelationField) IAvtSmartLockDo
	FirstOrInit() (*model.AvtSmartLock, error)
	FirstOrCreate() (*model.AvtSmartLock, error)
	FindByPage(offset int, limit int) (result []*model.AvtSmartLock, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAvtSmartLockDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a avtSmartLockDo) Debug() IAvtSmartLockDo {
	return a.withDO(a.DO.Debug())
}

func (a avtSmartLockDo) WithContext(ctx context.Context) IAvtSmartLockDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a avtSmartLockDo) ReadDB() IAvtSmartLockDo {
	return a.Clauses(dbresolver.Read)
}

func (a avtSmartLockDo) WriteDB() IAvtSmartLockDo {
	return a.Clauses(dbresolver.Write)
}

func (a avtSmartLockDo) Session(config *gorm.Session) IAvtSmartLockDo {
	return a.withDO(a.DO.Session(config))
}

func (a avtSmartLockDo) Clauses(conds ...clause.Expression) IAvtSmartLockDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a avtSmartLockDo) Returning(value interface{}, columns ...string) IAvtSmartLockDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a avtSmartLockDo) Not(conds ...gen.Condition) IAvtSmartLockDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a avtSmartLockDo) Or(conds ...gen.Condition) IAvtSmartLockDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a avtSmartLockDo) Select(conds ...field.Expr) IAvtSmartLockDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a avtSmartLockDo) Where(conds ...gen.Condition) IAvtSmartLockDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a avtSmartLockDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAvtSmartLockDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a avtSmartLockDo) Order(conds ...field.Expr) IAvtSmartLockDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a avtSmartLockDo) Distinct(cols ...field.Expr) IAvtSmartLockDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a avtSmartLockDo) Omit(cols ...field.Expr) IAvtSmartLockDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a avtSmartLockDo) Join(table schema.Tabler, on ...field.Expr) IAvtSmartLockDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a avtSmartLockDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAvtSmartLockDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a avtSmartLockDo) RightJoin(table schema.Tabler, on ...field.Expr) IAvtSmartLockDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a avtSmartLockDo) Group(cols ...field.Expr) IAvtSmartLockDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a avtSmartLockDo) Having(conds ...gen.Condition) IAvtSmartLockDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a avtSmartLockDo) Limit(limit int) IAvtSmartLockDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a avtSmartLockDo) Offset(offset int) IAvtSmartLockDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a avtSmartLockDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtSmartLockDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a avtSmartLockDo) Unscoped() IAvtSmartLockDo {
	return a.withDO(a.DO.Unscoped())
}

func (a avtSmartLockDo) Create(values ...*model.AvtSmartLock) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a avtSmartLockDo) CreateInBatches(values []*model.AvtSmartLock, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a avtSmartLockDo) Save(values ...*model.AvtSmartLock) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a avtSmartLockDo) First() (*model.AvtSmartLock, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtSmartLock), nil
	}
}

func (a avtSmartLockDo) Take() (*model.AvtSmartLock, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtSmartLock), nil
	}
}

func (a avtSmartLockDo) Last() (*model.AvtSmartLock, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtSmartLock), nil
	}
}

func (a avtSmartLockDo) Find() ([]*model.AvtSmartLock, error) {
	result, err := a.DO.Find()
	return result.([]*model.AvtSmartLock), err
}

func (a avtSmartLockDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtSmartLock, err error) {
	buf := make([]*model.AvtSmartLock, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a avtSmartLockDo) FindInBatches(result *[]*model.AvtSmartLock, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a avtSmartLockDo) Attrs(attrs ...field.AssignExpr) IAvtSmartLockDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a avtSmartLockDo) Assign(attrs ...field.AssignExpr) IAvtSmartLockDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a avtSmartLockDo) Joins(fields ...field.RelationField) IAvtSmartLockDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a avtSmartLockDo) Preload(fields ...field.RelationField) IAvtSmartLockDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a avtSmartLockDo) FirstOrInit() (*model.AvtSmartLock, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtSmartLock), nil
	}
}

func (a avtSmartLockDo) FirstOrCreate() (*model.AvtSmartLock, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtSmartLock), nil
	}
}

func (a avtSmartLockDo) FindByPage(offset int, limit int) (result []*model.AvtSmartLock, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a avtSmartLockDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a avtSmartLockDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a avtSmartLockDo) Delete(models ...*model.AvtSmartLock) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *avtSmartLockDo) withDO(do gen.Dao) *avtSmartLockDo {
	a.DO = *do.(*gen.DO)
	return a
}
