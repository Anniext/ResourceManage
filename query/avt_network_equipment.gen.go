// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newAvtNetworkEquipment(db *gorm.DB, opts ...gen.DOOption) avtNetworkEquipment {
	_avtNetworkEquipment := avtNetworkEquipment{}

	_avtNetworkEquipment.avtNetworkEquipmentDo.UseDB(db, opts...)
	_avtNetworkEquipment.avtNetworkEquipmentDo.UseModel(&model.AvtNetworkEquipment{})

	tableName := _avtNetworkEquipment.avtNetworkEquipmentDo.TableName()
	_avtNetworkEquipment.ALL = field.NewAsterisk(tableName)
	_avtNetworkEquipment.ID = field.NewInt64(tableName, "id")
	_avtNetworkEquipment.Campus = field.NewString(tableName, "campus")
	_avtNetworkEquipment.Building = field.NewString(tableName, "building")
	_avtNetworkEquipment.Floor = field.NewString(tableName, "floor")
	_avtNetworkEquipment.Room = field.NewString(tableName, "room")
	_avtNetworkEquipment.Model = field.NewString(tableName, "model")
	_avtNetworkEquipment.Position = field.NewString(tableName, "position")
	_avtNetworkEquipment.IP = field.NewString(tableName, "ip")
	_avtNetworkEquipment.CreateTime = field.NewTime(tableName, "create_time")
	_avtNetworkEquipment.UpdateTime = field.NewTime(tableName, "update_time")

	_avtNetworkEquipment.fillFieldMap()

	return _avtNetworkEquipment
}

type avtNetworkEquipment struct {
	avtNetworkEquipmentDo

	ALL        field.Asterisk
	ID         field.Int64
	Campus     field.String // 校区
	Building   field.String // 大楼
	Floor      field.String // 楼层
	Room       field.String // 教室
	Model      field.String // 设备型号
	Position   field.String // 安装位置
	IP         field.String // IP地址
	CreateTime field.Time
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (a avtNetworkEquipment) Table(newTableName string) *avtNetworkEquipment {
	a.avtNetworkEquipmentDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a avtNetworkEquipment) As(alias string) *avtNetworkEquipment {
	a.avtNetworkEquipmentDo.DO = *(a.avtNetworkEquipmentDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *avtNetworkEquipment) updateTableName(table string) *avtNetworkEquipment {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Campus = field.NewString(table, "campus")
	a.Building = field.NewString(table, "building")
	a.Floor = field.NewString(table, "floor")
	a.Room = field.NewString(table, "room")
	a.Model = field.NewString(table, "model")
	a.Position = field.NewString(table, "position")
	a.IP = field.NewString(table, "ip")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")

	a.fillFieldMap()

	return a
}

func (a *avtNetworkEquipment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *avtNetworkEquipment) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id"] = a.ID
	a.fieldMap["campus"] = a.Campus
	a.fieldMap["building"] = a.Building
	a.fieldMap["floor"] = a.Floor
	a.fieldMap["room"] = a.Room
	a.fieldMap["model"] = a.Model
	a.fieldMap["position"] = a.Position
	a.fieldMap["ip"] = a.IP
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
}

func (a avtNetworkEquipment) clone(db *gorm.DB) avtNetworkEquipment {
	a.avtNetworkEquipmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a avtNetworkEquipment) replaceDB(db *gorm.DB) avtNetworkEquipment {
	a.avtNetworkEquipmentDo.ReplaceDB(db)
	return a
}

type avtNetworkEquipmentDo struct{ gen.DO }

type IAvtNetworkEquipmentDo interface {
	gen.SubQuery
	Debug() IAvtNetworkEquipmentDo
	WithContext(ctx context.Context) IAvtNetworkEquipmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAvtNetworkEquipmentDo
	WriteDB() IAvtNetworkEquipmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAvtNetworkEquipmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAvtNetworkEquipmentDo
	Not(conds ...gen.Condition) IAvtNetworkEquipmentDo
	Or(conds ...gen.Condition) IAvtNetworkEquipmentDo
	Select(conds ...field.Expr) IAvtNetworkEquipmentDo
	Where(conds ...gen.Condition) IAvtNetworkEquipmentDo
	Order(conds ...field.Expr) IAvtNetworkEquipmentDo
	Distinct(cols ...field.Expr) IAvtNetworkEquipmentDo
	Omit(cols ...field.Expr) IAvtNetworkEquipmentDo
	Join(table schema.Tabler, on ...field.Expr) IAvtNetworkEquipmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAvtNetworkEquipmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAvtNetworkEquipmentDo
	Group(cols ...field.Expr) IAvtNetworkEquipmentDo
	Having(conds ...gen.Condition) IAvtNetworkEquipmentDo
	Limit(limit int) IAvtNetworkEquipmentDo
	Offset(offset int) IAvtNetworkEquipmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtNetworkEquipmentDo
	Unscoped() IAvtNetworkEquipmentDo
	Create(values ...*model.AvtNetworkEquipment) error
	CreateInBatches(values []*model.AvtNetworkEquipment, batchSize int) error
	Save(values ...*model.AvtNetworkEquipment) error
	First() (*model.AvtNetworkEquipment, error)
	Take() (*model.AvtNetworkEquipment, error)
	Last() (*model.AvtNetworkEquipment, error)
	Find() ([]*model.AvtNetworkEquipment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtNetworkEquipment, err error)
	FindInBatches(result *[]*model.AvtNetworkEquipment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AvtNetworkEquipment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAvtNetworkEquipmentDo
	Assign(attrs ...field.AssignExpr) IAvtNetworkEquipmentDo
	Joins(fields ...field.RelationField) IAvtNetworkEquipmentDo
	Preload(fields ...field.RelationField) IAvtNetworkEquipmentDo
	FirstOrInit() (*model.AvtNetworkEquipment, error)
	FirstOrCreate() (*model.AvtNetworkEquipment, error)
	FindByPage(offset int, limit int) (result []*model.AvtNetworkEquipment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAvtNetworkEquipmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a avtNetworkEquipmentDo) Debug() IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.Debug())
}

func (a avtNetworkEquipmentDo) WithContext(ctx context.Context) IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a avtNetworkEquipmentDo) ReadDB() IAvtNetworkEquipmentDo {
	return a.Clauses(dbresolver.Read)
}

func (a avtNetworkEquipmentDo) WriteDB() IAvtNetworkEquipmentDo {
	return a.Clauses(dbresolver.Write)
}

func (a avtNetworkEquipmentDo) Session(config *gorm.Session) IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.Session(config))
}

func (a avtNetworkEquipmentDo) Clauses(conds ...clause.Expression) IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a avtNetworkEquipmentDo) Returning(value interface{}, columns ...string) IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a avtNetworkEquipmentDo) Not(conds ...gen.Condition) IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a avtNetworkEquipmentDo) Or(conds ...gen.Condition) IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a avtNetworkEquipmentDo) Select(conds ...field.Expr) IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a avtNetworkEquipmentDo) Where(conds ...gen.Condition) IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a avtNetworkEquipmentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAvtNetworkEquipmentDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a avtNetworkEquipmentDo) Order(conds ...field.Expr) IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a avtNetworkEquipmentDo) Distinct(cols ...field.Expr) IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a avtNetworkEquipmentDo) Omit(cols ...field.Expr) IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a avtNetworkEquipmentDo) Join(table schema.Tabler, on ...field.Expr) IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a avtNetworkEquipmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a avtNetworkEquipmentDo) RightJoin(table schema.Tabler, on ...field.Expr) IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a avtNetworkEquipmentDo) Group(cols ...field.Expr) IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a avtNetworkEquipmentDo) Having(conds ...gen.Condition) IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a avtNetworkEquipmentDo) Limit(limit int) IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a avtNetworkEquipmentDo) Offset(offset int) IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a avtNetworkEquipmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a avtNetworkEquipmentDo) Unscoped() IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.Unscoped())
}

func (a avtNetworkEquipmentDo) Create(values ...*model.AvtNetworkEquipment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a avtNetworkEquipmentDo) CreateInBatches(values []*model.AvtNetworkEquipment, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a avtNetworkEquipmentDo) Save(values ...*model.AvtNetworkEquipment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a avtNetworkEquipmentDo) First() (*model.AvtNetworkEquipment, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtNetworkEquipment), nil
	}
}

func (a avtNetworkEquipmentDo) Take() (*model.AvtNetworkEquipment, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtNetworkEquipment), nil
	}
}

func (a avtNetworkEquipmentDo) Last() (*model.AvtNetworkEquipment, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtNetworkEquipment), nil
	}
}

func (a avtNetworkEquipmentDo) Find() ([]*model.AvtNetworkEquipment, error) {
	result, err := a.DO.Find()
	return result.([]*model.AvtNetworkEquipment), err
}

func (a avtNetworkEquipmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtNetworkEquipment, err error) {
	buf := make([]*model.AvtNetworkEquipment, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a avtNetworkEquipmentDo) FindInBatches(result *[]*model.AvtNetworkEquipment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a avtNetworkEquipmentDo) Attrs(attrs ...field.AssignExpr) IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a avtNetworkEquipmentDo) Assign(attrs ...field.AssignExpr) IAvtNetworkEquipmentDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a avtNetworkEquipmentDo) Joins(fields ...field.RelationField) IAvtNetworkEquipmentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a avtNetworkEquipmentDo) Preload(fields ...field.RelationField) IAvtNetworkEquipmentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a avtNetworkEquipmentDo) FirstOrInit() (*model.AvtNetworkEquipment, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtNetworkEquipment), nil
	}
}

func (a avtNetworkEquipmentDo) FirstOrCreate() (*model.AvtNetworkEquipment, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtNetworkEquipment), nil
	}
}

func (a avtNetworkEquipmentDo) FindByPage(offset int, limit int) (result []*model.AvtNetworkEquipment, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a avtNetworkEquipmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a avtNetworkEquipmentDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a avtNetworkEquipmentDo) Delete(models ...*model.AvtNetworkEquipment) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *avtNetworkEquipmentDo) withDO(do gen.Dao) *avtNetworkEquipmentDo {
	a.DO = *do.(*gen.DO)
	return a
}
