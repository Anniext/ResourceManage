// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newAvtTimetable(db *gorm.DB, opts ...gen.DOOption) avtTimetable {
	_avtTimetable := avtTimetable{}

	_avtTimetable.avtTimetableDo.UseDB(db, opts...)
	_avtTimetable.avtTimetableDo.UseModel(&model.AvtTimetable{})

	tableName := _avtTimetable.avtTimetableDo.TableName()
	_avtTimetable.ALL = field.NewAsterisk(tableName)
	_avtTimetable.ID = field.NewInt64(tableName, "id")
	_avtTimetable.RoomID = field.NewInt64(tableName, "room_id")
	_avtTimetable.Course = field.NewString(tableName, "course")
	_avtTimetable.TeacherID = field.NewInt64(tableName, "teacher_id")
	_avtTimetable.Weekday = field.NewInt64(tableName, "weekday")
	_avtTimetable.ClassIndex = field.NewInt64(tableName, "class_index")
	_avtTimetable.AutoStart = field.NewInt64(tableName, "auto_start")
	_avtTimetable.AutoStop = field.NewInt64(tableName, "auto_stop")
	_avtTimetable.CreateTime = field.NewTime(tableName, "create_time")
	_avtTimetable.UpdateTime = field.NewTime(tableName, "update_time")
	_avtTimetable.StartWeek = field.NewInt64(tableName, "start_week")
	_avtTimetable.EndWeek = field.NewInt64(tableName, "end_week")
	_avtTimetable.WeekList = field.NewString(tableName, "week_list")

	_avtTimetable.fillFieldMap()

	return _avtTimetable
}

type avtTimetable struct {
	avtTimetableDo

	ALL        field.Asterisk
	ID         field.Int64
	RoomID     field.Int64
	Course     field.String
	TeacherID  field.Int64
	Weekday    field.Int64 // 星期几
	ClassIndex field.Int64 // 第几节课
	AutoStart  field.Int64 // 自动开启:1-yes;2-no
	AutoStop   field.Int64 // 自动结束:1-yes;2-no
	CreateTime field.Time
	UpdateTime field.Time
	StartWeek  field.Int64  // 开始周
	EndWeek    field.Int64  // 结束周
	WeekList   field.String // 指定周：1,2,4

	fieldMap map[string]field.Expr
}

func (a avtTimetable) Table(newTableName string) *avtTimetable {
	a.avtTimetableDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a avtTimetable) As(alias string) *avtTimetable {
	a.avtTimetableDo.DO = *(a.avtTimetableDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *avtTimetable) updateTableName(table string) *avtTimetable {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.RoomID = field.NewInt64(table, "room_id")
	a.Course = field.NewString(table, "course")
	a.TeacherID = field.NewInt64(table, "teacher_id")
	a.Weekday = field.NewInt64(table, "weekday")
	a.ClassIndex = field.NewInt64(table, "class_index")
	a.AutoStart = field.NewInt64(table, "auto_start")
	a.AutoStop = field.NewInt64(table, "auto_stop")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.StartWeek = field.NewInt64(table, "start_week")
	a.EndWeek = field.NewInt64(table, "end_week")
	a.WeekList = field.NewString(table, "week_list")

	a.fillFieldMap()

	return a
}

func (a *avtTimetable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *avtTimetable) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 13)
	a.fieldMap["id"] = a.ID
	a.fieldMap["room_id"] = a.RoomID
	a.fieldMap["course"] = a.Course
	a.fieldMap["teacher_id"] = a.TeacherID
	a.fieldMap["weekday"] = a.Weekday
	a.fieldMap["class_index"] = a.ClassIndex
	a.fieldMap["auto_start"] = a.AutoStart
	a.fieldMap["auto_stop"] = a.AutoStop
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["start_week"] = a.StartWeek
	a.fieldMap["end_week"] = a.EndWeek
	a.fieldMap["week_list"] = a.WeekList
}

func (a avtTimetable) clone(db *gorm.DB) avtTimetable {
	a.avtTimetableDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a avtTimetable) replaceDB(db *gorm.DB) avtTimetable {
	a.avtTimetableDo.ReplaceDB(db)
	return a
}

type avtTimetableDo struct{ gen.DO }

type IAvtTimetableDo interface {
	gen.SubQuery
	Debug() IAvtTimetableDo
	WithContext(ctx context.Context) IAvtTimetableDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAvtTimetableDo
	WriteDB() IAvtTimetableDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAvtTimetableDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAvtTimetableDo
	Not(conds ...gen.Condition) IAvtTimetableDo
	Or(conds ...gen.Condition) IAvtTimetableDo
	Select(conds ...field.Expr) IAvtTimetableDo
	Where(conds ...gen.Condition) IAvtTimetableDo
	Order(conds ...field.Expr) IAvtTimetableDo
	Distinct(cols ...field.Expr) IAvtTimetableDo
	Omit(cols ...field.Expr) IAvtTimetableDo
	Join(table schema.Tabler, on ...field.Expr) IAvtTimetableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAvtTimetableDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAvtTimetableDo
	Group(cols ...field.Expr) IAvtTimetableDo
	Having(conds ...gen.Condition) IAvtTimetableDo
	Limit(limit int) IAvtTimetableDo
	Offset(offset int) IAvtTimetableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtTimetableDo
	Unscoped() IAvtTimetableDo
	Create(values ...*model.AvtTimetable) error
	CreateInBatches(values []*model.AvtTimetable, batchSize int) error
	Save(values ...*model.AvtTimetable) error
	First() (*model.AvtTimetable, error)
	Take() (*model.AvtTimetable, error)
	Last() (*model.AvtTimetable, error)
	Find() ([]*model.AvtTimetable, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtTimetable, err error)
	FindInBatches(result *[]*model.AvtTimetable, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AvtTimetable) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAvtTimetableDo
	Assign(attrs ...field.AssignExpr) IAvtTimetableDo
	Joins(fields ...field.RelationField) IAvtTimetableDo
	Preload(fields ...field.RelationField) IAvtTimetableDo
	FirstOrInit() (*model.AvtTimetable, error)
	FirstOrCreate() (*model.AvtTimetable, error)
	FindByPage(offset int, limit int) (result []*model.AvtTimetable, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAvtTimetableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a avtTimetableDo) Debug() IAvtTimetableDo {
	return a.withDO(a.DO.Debug())
}

func (a avtTimetableDo) WithContext(ctx context.Context) IAvtTimetableDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a avtTimetableDo) ReadDB() IAvtTimetableDo {
	return a.Clauses(dbresolver.Read)
}

func (a avtTimetableDo) WriteDB() IAvtTimetableDo {
	return a.Clauses(dbresolver.Write)
}

func (a avtTimetableDo) Session(config *gorm.Session) IAvtTimetableDo {
	return a.withDO(a.DO.Session(config))
}

func (a avtTimetableDo) Clauses(conds ...clause.Expression) IAvtTimetableDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a avtTimetableDo) Returning(value interface{}, columns ...string) IAvtTimetableDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a avtTimetableDo) Not(conds ...gen.Condition) IAvtTimetableDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a avtTimetableDo) Or(conds ...gen.Condition) IAvtTimetableDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a avtTimetableDo) Select(conds ...field.Expr) IAvtTimetableDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a avtTimetableDo) Where(conds ...gen.Condition) IAvtTimetableDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a avtTimetableDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAvtTimetableDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a avtTimetableDo) Order(conds ...field.Expr) IAvtTimetableDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a avtTimetableDo) Distinct(cols ...field.Expr) IAvtTimetableDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a avtTimetableDo) Omit(cols ...field.Expr) IAvtTimetableDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a avtTimetableDo) Join(table schema.Tabler, on ...field.Expr) IAvtTimetableDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a avtTimetableDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAvtTimetableDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a avtTimetableDo) RightJoin(table schema.Tabler, on ...field.Expr) IAvtTimetableDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a avtTimetableDo) Group(cols ...field.Expr) IAvtTimetableDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a avtTimetableDo) Having(conds ...gen.Condition) IAvtTimetableDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a avtTimetableDo) Limit(limit int) IAvtTimetableDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a avtTimetableDo) Offset(offset int) IAvtTimetableDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a avtTimetableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtTimetableDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a avtTimetableDo) Unscoped() IAvtTimetableDo {
	return a.withDO(a.DO.Unscoped())
}

func (a avtTimetableDo) Create(values ...*model.AvtTimetable) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a avtTimetableDo) CreateInBatches(values []*model.AvtTimetable, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a avtTimetableDo) Save(values ...*model.AvtTimetable) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a avtTimetableDo) First() (*model.AvtTimetable, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtTimetable), nil
	}
}

func (a avtTimetableDo) Take() (*model.AvtTimetable, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtTimetable), nil
	}
}

func (a avtTimetableDo) Last() (*model.AvtTimetable, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtTimetable), nil
	}
}

func (a avtTimetableDo) Find() ([]*model.AvtTimetable, error) {
	result, err := a.DO.Find()
	return result.([]*model.AvtTimetable), err
}

func (a avtTimetableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtTimetable, err error) {
	buf := make([]*model.AvtTimetable, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a avtTimetableDo) FindInBatches(result *[]*model.AvtTimetable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a avtTimetableDo) Attrs(attrs ...field.AssignExpr) IAvtTimetableDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a avtTimetableDo) Assign(attrs ...field.AssignExpr) IAvtTimetableDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a avtTimetableDo) Joins(fields ...field.RelationField) IAvtTimetableDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a avtTimetableDo) Preload(fields ...field.RelationField) IAvtTimetableDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a avtTimetableDo) FirstOrInit() (*model.AvtTimetable, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtTimetable), nil
	}
}

func (a avtTimetableDo) FirstOrCreate() (*model.AvtTimetable, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtTimetable), nil
	}
}

func (a avtTimetableDo) FindByPage(offset int, limit int) (result []*model.AvtTimetable, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a avtTimetableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a avtTimetableDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a avtTimetableDo) Delete(models ...*model.AvtTimetable) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *avtTimetableDo) withDO(do gen.Dao) *avtTimetableDo {
	a.DO = *do.(*gen.DO)
	return a
}
