// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newAvtRoomCamera(db *gorm.DB, opts ...gen.DOOption) avtRoomCamera {
	_avtRoomCamera := avtRoomCamera{}

	_avtRoomCamera.avtRoomCameraDo.UseDB(db, opts...)
	_avtRoomCamera.avtRoomCameraDo.UseModel(&model.AvtRoomCamera{})

	tableName := _avtRoomCamera.avtRoomCameraDo.TableName()
	_avtRoomCamera.ALL = field.NewAsterisk(tableName)
	_avtRoomCamera.ID = field.NewInt64(tableName, "id")
	_avtRoomCamera.Title = field.NewString(tableName, "title")
	_avtRoomCamera.RoomID = field.NewInt64(tableName, "room_id")
	_avtRoomCamera.RtspURL = field.NewString(tableName, "rtsp_url")
	_avtRoomCamera.Group_ = field.NewInt64(tableName, "group")
	_avtRoomCamera.FlvURL = field.NewString(tableName, "flv_url")
	_avtRoomCamera.DirectionType = field.NewInt64(tableName, "direction_type")
	_avtRoomCamera.Enable = field.NewInt64(tableName, "enable")
	_avtRoomCamera.Type = field.NewInt64(tableName, "type")
	_avtRoomCamera.GbNamespace = field.NewString(tableName, "gb_namespace")
	_avtRoomCamera.GbChannelID = field.NewString(tableName, "gb_channel_id")

	_avtRoomCamera.fillFieldMap()

	return _avtRoomCamera
}

type avtRoomCamera struct {
	avtRoomCameraDo

	ALL           field.Asterisk
	ID            field.Int64
	Title         field.String
	RoomID        field.Int64
	RtspURL       field.String
	Group_        field.Int64  // 播放窗口分组
	FlvURL        field.String // web播放的flv地址
	DirectionType field.Int64  // 0-pull;1-push
	Enable        field.Int64  // 1-启用；0-禁用
	Type          field.Int64  // 1-老师通道；2-学生通道；3-讲台电脑
	GbNamespace   field.String // 国标空间id
	GbChannelID   field.String // 国标通道id

	fieldMap map[string]field.Expr
}

func (a avtRoomCamera) Table(newTableName string) *avtRoomCamera {
	a.avtRoomCameraDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a avtRoomCamera) As(alias string) *avtRoomCamera {
	a.avtRoomCameraDo.DO = *(a.avtRoomCameraDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *avtRoomCamera) updateTableName(table string) *avtRoomCamera {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Title = field.NewString(table, "title")
	a.RoomID = field.NewInt64(table, "room_id")
	a.RtspURL = field.NewString(table, "rtsp_url")
	a.Group_ = field.NewInt64(table, "group")
	a.FlvURL = field.NewString(table, "flv_url")
	a.DirectionType = field.NewInt64(table, "direction_type")
	a.Enable = field.NewInt64(table, "enable")
	a.Type = field.NewInt64(table, "type")
	a.GbNamespace = field.NewString(table, "gb_namespace")
	a.GbChannelID = field.NewString(table, "gb_channel_id")

	a.fillFieldMap()

	return a
}

func (a *avtRoomCamera) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *avtRoomCamera) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["title"] = a.Title
	a.fieldMap["room_id"] = a.RoomID
	a.fieldMap["rtsp_url"] = a.RtspURL
	a.fieldMap["group"] = a.Group_
	a.fieldMap["flv_url"] = a.FlvURL
	a.fieldMap["direction_type"] = a.DirectionType
	a.fieldMap["enable"] = a.Enable
	a.fieldMap["type"] = a.Type
	a.fieldMap["gb_namespace"] = a.GbNamespace
	a.fieldMap["gb_channel_id"] = a.GbChannelID
}

func (a avtRoomCamera) clone(db *gorm.DB) avtRoomCamera {
	a.avtRoomCameraDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a avtRoomCamera) replaceDB(db *gorm.DB) avtRoomCamera {
	a.avtRoomCameraDo.ReplaceDB(db)
	return a
}

type avtRoomCameraDo struct{ gen.DO }

type IAvtRoomCameraDo interface {
	gen.SubQuery
	Debug() IAvtRoomCameraDo
	WithContext(ctx context.Context) IAvtRoomCameraDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAvtRoomCameraDo
	WriteDB() IAvtRoomCameraDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAvtRoomCameraDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAvtRoomCameraDo
	Not(conds ...gen.Condition) IAvtRoomCameraDo
	Or(conds ...gen.Condition) IAvtRoomCameraDo
	Select(conds ...field.Expr) IAvtRoomCameraDo
	Where(conds ...gen.Condition) IAvtRoomCameraDo
	Order(conds ...field.Expr) IAvtRoomCameraDo
	Distinct(cols ...field.Expr) IAvtRoomCameraDo
	Omit(cols ...field.Expr) IAvtRoomCameraDo
	Join(table schema.Tabler, on ...field.Expr) IAvtRoomCameraDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAvtRoomCameraDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAvtRoomCameraDo
	Group(cols ...field.Expr) IAvtRoomCameraDo
	Having(conds ...gen.Condition) IAvtRoomCameraDo
	Limit(limit int) IAvtRoomCameraDo
	Offset(offset int) IAvtRoomCameraDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtRoomCameraDo
	Unscoped() IAvtRoomCameraDo
	Create(values ...*model.AvtRoomCamera) error
	CreateInBatches(values []*model.AvtRoomCamera, batchSize int) error
	Save(values ...*model.AvtRoomCamera) error
	First() (*model.AvtRoomCamera, error)
	Take() (*model.AvtRoomCamera, error)
	Last() (*model.AvtRoomCamera, error)
	Find() ([]*model.AvtRoomCamera, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtRoomCamera, err error)
	FindInBatches(result *[]*model.AvtRoomCamera, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AvtRoomCamera) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAvtRoomCameraDo
	Assign(attrs ...field.AssignExpr) IAvtRoomCameraDo
	Joins(fields ...field.RelationField) IAvtRoomCameraDo
	Preload(fields ...field.RelationField) IAvtRoomCameraDo
	FirstOrInit() (*model.AvtRoomCamera, error)
	FirstOrCreate() (*model.AvtRoomCamera, error)
	FindByPage(offset int, limit int) (result []*model.AvtRoomCamera, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAvtRoomCameraDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a avtRoomCameraDo) Debug() IAvtRoomCameraDo {
	return a.withDO(a.DO.Debug())
}

func (a avtRoomCameraDo) WithContext(ctx context.Context) IAvtRoomCameraDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a avtRoomCameraDo) ReadDB() IAvtRoomCameraDo {
	return a.Clauses(dbresolver.Read)
}

func (a avtRoomCameraDo) WriteDB() IAvtRoomCameraDo {
	return a.Clauses(dbresolver.Write)
}

func (a avtRoomCameraDo) Session(config *gorm.Session) IAvtRoomCameraDo {
	return a.withDO(a.DO.Session(config))
}

func (a avtRoomCameraDo) Clauses(conds ...clause.Expression) IAvtRoomCameraDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a avtRoomCameraDo) Returning(value interface{}, columns ...string) IAvtRoomCameraDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a avtRoomCameraDo) Not(conds ...gen.Condition) IAvtRoomCameraDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a avtRoomCameraDo) Or(conds ...gen.Condition) IAvtRoomCameraDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a avtRoomCameraDo) Select(conds ...field.Expr) IAvtRoomCameraDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a avtRoomCameraDo) Where(conds ...gen.Condition) IAvtRoomCameraDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a avtRoomCameraDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAvtRoomCameraDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a avtRoomCameraDo) Order(conds ...field.Expr) IAvtRoomCameraDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a avtRoomCameraDo) Distinct(cols ...field.Expr) IAvtRoomCameraDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a avtRoomCameraDo) Omit(cols ...field.Expr) IAvtRoomCameraDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a avtRoomCameraDo) Join(table schema.Tabler, on ...field.Expr) IAvtRoomCameraDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a avtRoomCameraDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAvtRoomCameraDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a avtRoomCameraDo) RightJoin(table schema.Tabler, on ...field.Expr) IAvtRoomCameraDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a avtRoomCameraDo) Group(cols ...field.Expr) IAvtRoomCameraDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a avtRoomCameraDo) Having(conds ...gen.Condition) IAvtRoomCameraDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a avtRoomCameraDo) Limit(limit int) IAvtRoomCameraDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a avtRoomCameraDo) Offset(offset int) IAvtRoomCameraDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a avtRoomCameraDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtRoomCameraDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a avtRoomCameraDo) Unscoped() IAvtRoomCameraDo {
	return a.withDO(a.DO.Unscoped())
}

func (a avtRoomCameraDo) Create(values ...*model.AvtRoomCamera) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a avtRoomCameraDo) CreateInBatches(values []*model.AvtRoomCamera, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a avtRoomCameraDo) Save(values ...*model.AvtRoomCamera) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a avtRoomCameraDo) First() (*model.AvtRoomCamera, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtRoomCamera), nil
	}
}

func (a avtRoomCameraDo) Take() (*model.AvtRoomCamera, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtRoomCamera), nil
	}
}

func (a avtRoomCameraDo) Last() (*model.AvtRoomCamera, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtRoomCamera), nil
	}
}

func (a avtRoomCameraDo) Find() ([]*model.AvtRoomCamera, error) {
	result, err := a.DO.Find()
	return result.([]*model.AvtRoomCamera), err
}

func (a avtRoomCameraDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtRoomCamera, err error) {
	buf := make([]*model.AvtRoomCamera, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a avtRoomCameraDo) FindInBatches(result *[]*model.AvtRoomCamera, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a avtRoomCameraDo) Attrs(attrs ...field.AssignExpr) IAvtRoomCameraDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a avtRoomCameraDo) Assign(attrs ...field.AssignExpr) IAvtRoomCameraDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a avtRoomCameraDo) Joins(fields ...field.RelationField) IAvtRoomCameraDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a avtRoomCameraDo) Preload(fields ...field.RelationField) IAvtRoomCameraDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a avtRoomCameraDo) FirstOrInit() (*model.AvtRoomCamera, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtRoomCamera), nil
	}
}

func (a avtRoomCameraDo) FirstOrCreate() (*model.AvtRoomCamera, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtRoomCamera), nil
	}
}

func (a avtRoomCameraDo) FindByPage(offset int, limit int) (result []*model.AvtRoomCamera, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a avtRoomCameraDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a avtRoomCameraDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a avtRoomCameraDo) Delete(models ...*model.AvtRoomCamera) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *avtRoomCameraDo) withDO(do gen.Dao) *avtRoomCameraDo {
	a.DO = *do.(*gen.DO)
	return a
}
