// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newAvtCourse(db *gorm.DB, opts ...gen.DOOption) avtCourse {
	_avtCourse := avtCourse{}

	_avtCourse.avtCourseDo.UseDB(db, opts...)
	_avtCourse.avtCourseDo.UseModel(&model.AvtCourse{})

	tableName := _avtCourse.avtCourseDo.TableName()
	_avtCourse.ALL = field.NewAsterisk(tableName)
	_avtCourse.ID = field.NewInt64(tableName, "id")
	_avtCourse.KCMC = field.NewString(tableName, "KCMC")
	_avtCourse.Title = field.NewString(tableName, "title")
	_avtCourse.JSMC = field.NewString(tableName, "JSMC")
	_avtCourse.Logo = field.NewString(tableName, "logo")
	_avtCourse.BJMC = field.NewString(tableName, "BJMC")
	_avtCourse.ZJGMC = field.NewString(tableName, "ZJGMC")

	_avtCourse.fillFieldMap()

	return _avtCourse
}

type avtCourse struct {
	avtCourseDo

	ALL   field.Asterisk
	ID    field.Int64  // 课程编号
	KCMC  field.String // 课程名称
	Title field.String
	/*
		课程详情

	*/
	JSMC  field.String
	Logo  field.String // 图片路径
	BJMC  field.String // 教室名称
	ZJGMC field.String // 老师名称

	fieldMap map[string]field.Expr
}

func (a avtCourse) Table(newTableName string) *avtCourse {
	a.avtCourseDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a avtCourse) As(alias string) *avtCourse {
	a.avtCourseDo.DO = *(a.avtCourseDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *avtCourse) updateTableName(table string) *avtCourse {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.KCMC = field.NewString(table, "KCMC")
	a.Title = field.NewString(table, "title")
	a.JSMC = field.NewString(table, "JSMC")
	a.Logo = field.NewString(table, "logo")
	a.BJMC = field.NewString(table, "BJMC")
	a.ZJGMC = field.NewString(table, "ZJGMC")

	a.fillFieldMap()

	return a
}

func (a *avtCourse) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *avtCourse) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["KCMC"] = a.KCMC
	a.fieldMap["title"] = a.Title
	a.fieldMap["JSMC"] = a.JSMC
	a.fieldMap["logo"] = a.Logo
	a.fieldMap["BJMC"] = a.BJMC
	a.fieldMap["ZJGMC"] = a.ZJGMC
}

func (a avtCourse) clone(db *gorm.DB) avtCourse {
	a.avtCourseDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a avtCourse) replaceDB(db *gorm.DB) avtCourse {
	a.avtCourseDo.ReplaceDB(db)
	return a
}

type avtCourseDo struct{ gen.DO }

type IAvtCourseDo interface {
	gen.SubQuery
	Debug() IAvtCourseDo
	WithContext(ctx context.Context) IAvtCourseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAvtCourseDo
	WriteDB() IAvtCourseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAvtCourseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAvtCourseDo
	Not(conds ...gen.Condition) IAvtCourseDo
	Or(conds ...gen.Condition) IAvtCourseDo
	Select(conds ...field.Expr) IAvtCourseDo
	Where(conds ...gen.Condition) IAvtCourseDo
	Order(conds ...field.Expr) IAvtCourseDo
	Distinct(cols ...field.Expr) IAvtCourseDo
	Omit(cols ...field.Expr) IAvtCourseDo
	Join(table schema.Tabler, on ...field.Expr) IAvtCourseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAvtCourseDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAvtCourseDo
	Group(cols ...field.Expr) IAvtCourseDo
	Having(conds ...gen.Condition) IAvtCourseDo
	Limit(limit int) IAvtCourseDo
	Offset(offset int) IAvtCourseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtCourseDo
	Unscoped() IAvtCourseDo
	Create(values ...*model.AvtCourse) error
	CreateInBatches(values []*model.AvtCourse, batchSize int) error
	Save(values ...*model.AvtCourse) error
	First() (*model.AvtCourse, error)
	Take() (*model.AvtCourse, error)
	Last() (*model.AvtCourse, error)
	Find() ([]*model.AvtCourse, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtCourse, err error)
	FindInBatches(result *[]*model.AvtCourse, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AvtCourse) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAvtCourseDo
	Assign(attrs ...field.AssignExpr) IAvtCourseDo
	Joins(fields ...field.RelationField) IAvtCourseDo
	Preload(fields ...field.RelationField) IAvtCourseDo
	FirstOrInit() (*model.AvtCourse, error)
	FirstOrCreate() (*model.AvtCourse, error)
	FindByPage(offset int, limit int) (result []*model.AvtCourse, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAvtCourseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a avtCourseDo) Debug() IAvtCourseDo {
	return a.withDO(a.DO.Debug())
}

func (a avtCourseDo) WithContext(ctx context.Context) IAvtCourseDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a avtCourseDo) ReadDB() IAvtCourseDo {
	return a.Clauses(dbresolver.Read)
}

func (a avtCourseDo) WriteDB() IAvtCourseDo {
	return a.Clauses(dbresolver.Write)
}

func (a avtCourseDo) Session(config *gorm.Session) IAvtCourseDo {
	return a.withDO(a.DO.Session(config))
}

func (a avtCourseDo) Clauses(conds ...clause.Expression) IAvtCourseDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a avtCourseDo) Returning(value interface{}, columns ...string) IAvtCourseDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a avtCourseDo) Not(conds ...gen.Condition) IAvtCourseDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a avtCourseDo) Or(conds ...gen.Condition) IAvtCourseDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a avtCourseDo) Select(conds ...field.Expr) IAvtCourseDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a avtCourseDo) Where(conds ...gen.Condition) IAvtCourseDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a avtCourseDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAvtCourseDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a avtCourseDo) Order(conds ...field.Expr) IAvtCourseDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a avtCourseDo) Distinct(cols ...field.Expr) IAvtCourseDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a avtCourseDo) Omit(cols ...field.Expr) IAvtCourseDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a avtCourseDo) Join(table schema.Tabler, on ...field.Expr) IAvtCourseDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a avtCourseDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAvtCourseDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a avtCourseDo) RightJoin(table schema.Tabler, on ...field.Expr) IAvtCourseDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a avtCourseDo) Group(cols ...field.Expr) IAvtCourseDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a avtCourseDo) Having(conds ...gen.Condition) IAvtCourseDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a avtCourseDo) Limit(limit int) IAvtCourseDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a avtCourseDo) Offset(offset int) IAvtCourseDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a avtCourseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtCourseDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a avtCourseDo) Unscoped() IAvtCourseDo {
	return a.withDO(a.DO.Unscoped())
}

func (a avtCourseDo) Create(values ...*model.AvtCourse) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a avtCourseDo) CreateInBatches(values []*model.AvtCourse, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a avtCourseDo) Save(values ...*model.AvtCourse) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a avtCourseDo) First() (*model.AvtCourse, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtCourse), nil
	}
}

func (a avtCourseDo) Take() (*model.AvtCourse, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtCourse), nil
	}
}

func (a avtCourseDo) Last() (*model.AvtCourse, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtCourse), nil
	}
}

func (a avtCourseDo) Find() ([]*model.AvtCourse, error) {
	result, err := a.DO.Find()
	return result.([]*model.AvtCourse), err
}

func (a avtCourseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtCourse, err error) {
	buf := make([]*model.AvtCourse, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a avtCourseDo) FindInBatches(result *[]*model.AvtCourse, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a avtCourseDo) Attrs(attrs ...field.AssignExpr) IAvtCourseDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a avtCourseDo) Assign(attrs ...field.AssignExpr) IAvtCourseDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a avtCourseDo) Joins(fields ...field.RelationField) IAvtCourseDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a avtCourseDo) Preload(fields ...field.RelationField) IAvtCourseDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a avtCourseDo) FirstOrInit() (*model.AvtCourse, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtCourse), nil
	}
}

func (a avtCourseDo) FirstOrCreate() (*model.AvtCourse, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtCourse), nil
	}
}

func (a avtCourseDo) FindByPage(offset int, limit int) (result []*model.AvtCourse, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a avtCourseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a avtCourseDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a avtCourseDo) Delete(models ...*model.AvtCourse) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *avtCourseDo) withDO(do gen.Dao) *avtCourseDo {
	a.DO = *do.(*gen.DO)
	return a
}
