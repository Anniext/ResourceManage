// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newAvtWorkOrder(db *gorm.DB, opts ...gen.DOOption) avtWorkOrder {
	_avtWorkOrder := avtWorkOrder{}

	_avtWorkOrder.avtWorkOrderDo.UseDB(db, opts...)
	_avtWorkOrder.avtWorkOrderDo.UseModel(&model.AvtWorkOrder{})

	tableName := _avtWorkOrder.avtWorkOrderDo.TableName()
	_avtWorkOrder.ALL = field.NewAsterisk(tableName)
	_avtWorkOrder.ID = field.NewInt64(tableName, "id")
	_avtWorkOrder.Title = field.NewString(tableName, "title")
	_avtWorkOrder.BuildingID = field.NewInt64(tableName, "building_id")
	_avtWorkOrder.FloorID = field.NewInt64(tableName, "floor_id")
	_avtWorkOrder.RoomID = field.NewInt64(tableName, "room_id")
	_avtWorkOrder.CreateTime = field.NewTime(tableName, "create_time")
	_avtWorkOrder.UpdateTime = field.NewTime(tableName, "update_time")
	_avtWorkOrder.FaultType = field.NewInt64(tableName, "fault_type")
	_avtWorkOrder.Status = field.NewInt64(tableName, "status")
	_avtWorkOrder.CreateUserID = field.NewInt64(tableName, "create_user_id")
	_avtWorkOrder.CreatePhone = field.NewString(tableName, "create_phone")
	_avtWorkOrder.UserID = field.NewInt64(tableName, "user_id")
	_avtWorkOrder.Description = field.NewString(tableName, "description")

	_avtWorkOrder.fillFieldMap()

	return _avtWorkOrder
}

type avtWorkOrder struct {
	avtWorkOrderDo

	ALL          field.Asterisk
	ID           field.Int64
	Title        field.String
	BuildingID   field.Int64
	FloorID      field.Int64
	RoomID       field.Int64
	CreateTime   field.Time
	UpdateTime   field.Time
	FaultType    field.Int64 // 1-设备故障；2-网络故障；3-电路故障；4-其他故障
	Status       field.Int64 // 0-未处理；2-已解决；3-不需要处理
	CreateUserID field.Int64
	CreatePhone  field.String // 报修人电话
	UserID       field.Int64  // 处理人id
	Description  field.String // 报修详情

	fieldMap map[string]field.Expr
}

func (a avtWorkOrder) Table(newTableName string) *avtWorkOrder {
	a.avtWorkOrderDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a avtWorkOrder) As(alias string) *avtWorkOrder {
	a.avtWorkOrderDo.DO = *(a.avtWorkOrderDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *avtWorkOrder) updateTableName(table string) *avtWorkOrder {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Title = field.NewString(table, "title")
	a.BuildingID = field.NewInt64(table, "building_id")
	a.FloorID = field.NewInt64(table, "floor_id")
	a.RoomID = field.NewInt64(table, "room_id")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.FaultType = field.NewInt64(table, "fault_type")
	a.Status = field.NewInt64(table, "status")
	a.CreateUserID = field.NewInt64(table, "create_user_id")
	a.CreatePhone = field.NewString(table, "create_phone")
	a.UserID = field.NewInt64(table, "user_id")
	a.Description = field.NewString(table, "description")

	a.fillFieldMap()

	return a
}

func (a *avtWorkOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *avtWorkOrder) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 13)
	a.fieldMap["id"] = a.ID
	a.fieldMap["title"] = a.Title
	a.fieldMap["building_id"] = a.BuildingID
	a.fieldMap["floor_id"] = a.FloorID
	a.fieldMap["room_id"] = a.RoomID
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["fault_type"] = a.FaultType
	a.fieldMap["status"] = a.Status
	a.fieldMap["create_user_id"] = a.CreateUserID
	a.fieldMap["create_phone"] = a.CreatePhone
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["description"] = a.Description
}

func (a avtWorkOrder) clone(db *gorm.DB) avtWorkOrder {
	a.avtWorkOrderDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a avtWorkOrder) replaceDB(db *gorm.DB) avtWorkOrder {
	a.avtWorkOrderDo.ReplaceDB(db)
	return a
}

type avtWorkOrderDo struct{ gen.DO }

type IAvtWorkOrderDo interface {
	gen.SubQuery
	Debug() IAvtWorkOrderDo
	WithContext(ctx context.Context) IAvtWorkOrderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAvtWorkOrderDo
	WriteDB() IAvtWorkOrderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAvtWorkOrderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAvtWorkOrderDo
	Not(conds ...gen.Condition) IAvtWorkOrderDo
	Or(conds ...gen.Condition) IAvtWorkOrderDo
	Select(conds ...field.Expr) IAvtWorkOrderDo
	Where(conds ...gen.Condition) IAvtWorkOrderDo
	Order(conds ...field.Expr) IAvtWorkOrderDo
	Distinct(cols ...field.Expr) IAvtWorkOrderDo
	Omit(cols ...field.Expr) IAvtWorkOrderDo
	Join(table schema.Tabler, on ...field.Expr) IAvtWorkOrderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAvtWorkOrderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAvtWorkOrderDo
	Group(cols ...field.Expr) IAvtWorkOrderDo
	Having(conds ...gen.Condition) IAvtWorkOrderDo
	Limit(limit int) IAvtWorkOrderDo
	Offset(offset int) IAvtWorkOrderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtWorkOrderDo
	Unscoped() IAvtWorkOrderDo
	Create(values ...*model.AvtWorkOrder) error
	CreateInBatches(values []*model.AvtWorkOrder, batchSize int) error
	Save(values ...*model.AvtWorkOrder) error
	First() (*model.AvtWorkOrder, error)
	Take() (*model.AvtWorkOrder, error)
	Last() (*model.AvtWorkOrder, error)
	Find() ([]*model.AvtWorkOrder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtWorkOrder, err error)
	FindInBatches(result *[]*model.AvtWorkOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AvtWorkOrder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAvtWorkOrderDo
	Assign(attrs ...field.AssignExpr) IAvtWorkOrderDo
	Joins(fields ...field.RelationField) IAvtWorkOrderDo
	Preload(fields ...field.RelationField) IAvtWorkOrderDo
	FirstOrInit() (*model.AvtWorkOrder, error)
	FirstOrCreate() (*model.AvtWorkOrder, error)
	FindByPage(offset int, limit int) (result []*model.AvtWorkOrder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAvtWorkOrderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a avtWorkOrderDo) Debug() IAvtWorkOrderDo {
	return a.withDO(a.DO.Debug())
}

func (a avtWorkOrderDo) WithContext(ctx context.Context) IAvtWorkOrderDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a avtWorkOrderDo) ReadDB() IAvtWorkOrderDo {
	return a.Clauses(dbresolver.Read)
}

func (a avtWorkOrderDo) WriteDB() IAvtWorkOrderDo {
	return a.Clauses(dbresolver.Write)
}

func (a avtWorkOrderDo) Session(config *gorm.Session) IAvtWorkOrderDo {
	return a.withDO(a.DO.Session(config))
}

func (a avtWorkOrderDo) Clauses(conds ...clause.Expression) IAvtWorkOrderDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a avtWorkOrderDo) Returning(value interface{}, columns ...string) IAvtWorkOrderDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a avtWorkOrderDo) Not(conds ...gen.Condition) IAvtWorkOrderDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a avtWorkOrderDo) Or(conds ...gen.Condition) IAvtWorkOrderDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a avtWorkOrderDo) Select(conds ...field.Expr) IAvtWorkOrderDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a avtWorkOrderDo) Where(conds ...gen.Condition) IAvtWorkOrderDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a avtWorkOrderDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAvtWorkOrderDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a avtWorkOrderDo) Order(conds ...field.Expr) IAvtWorkOrderDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a avtWorkOrderDo) Distinct(cols ...field.Expr) IAvtWorkOrderDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a avtWorkOrderDo) Omit(cols ...field.Expr) IAvtWorkOrderDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a avtWorkOrderDo) Join(table schema.Tabler, on ...field.Expr) IAvtWorkOrderDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a avtWorkOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAvtWorkOrderDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a avtWorkOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) IAvtWorkOrderDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a avtWorkOrderDo) Group(cols ...field.Expr) IAvtWorkOrderDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a avtWorkOrderDo) Having(conds ...gen.Condition) IAvtWorkOrderDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a avtWorkOrderDo) Limit(limit int) IAvtWorkOrderDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a avtWorkOrderDo) Offset(offset int) IAvtWorkOrderDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a avtWorkOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtWorkOrderDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a avtWorkOrderDo) Unscoped() IAvtWorkOrderDo {
	return a.withDO(a.DO.Unscoped())
}

func (a avtWorkOrderDo) Create(values ...*model.AvtWorkOrder) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a avtWorkOrderDo) CreateInBatches(values []*model.AvtWorkOrder, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a avtWorkOrderDo) Save(values ...*model.AvtWorkOrder) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a avtWorkOrderDo) First() (*model.AvtWorkOrder, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtWorkOrder), nil
	}
}

func (a avtWorkOrderDo) Take() (*model.AvtWorkOrder, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtWorkOrder), nil
	}
}

func (a avtWorkOrderDo) Last() (*model.AvtWorkOrder, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtWorkOrder), nil
	}
}

func (a avtWorkOrderDo) Find() ([]*model.AvtWorkOrder, error) {
	result, err := a.DO.Find()
	return result.([]*model.AvtWorkOrder), err
}

func (a avtWorkOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtWorkOrder, err error) {
	buf := make([]*model.AvtWorkOrder, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a avtWorkOrderDo) FindInBatches(result *[]*model.AvtWorkOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a avtWorkOrderDo) Attrs(attrs ...field.AssignExpr) IAvtWorkOrderDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a avtWorkOrderDo) Assign(attrs ...field.AssignExpr) IAvtWorkOrderDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a avtWorkOrderDo) Joins(fields ...field.RelationField) IAvtWorkOrderDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a avtWorkOrderDo) Preload(fields ...field.RelationField) IAvtWorkOrderDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a avtWorkOrderDo) FirstOrInit() (*model.AvtWorkOrder, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtWorkOrder), nil
	}
}

func (a avtWorkOrderDo) FirstOrCreate() (*model.AvtWorkOrder, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtWorkOrder), nil
	}
}

func (a avtWorkOrderDo) FindByPage(offset int, limit int) (result []*model.AvtWorkOrder, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a avtWorkOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a avtWorkOrderDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a avtWorkOrderDo) Delete(models ...*model.AvtWorkOrder) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *avtWorkOrderDo) withDO(do gen.Dao) *avtWorkOrderDo {
	a.DO = *do.(*gen.DO)
	return a
}
