// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newSysBackendUserRmsRole(db *gorm.DB, opts ...gen.DOOption) sysBackendUserRmsRole {
	_sysBackendUserRmsRole := sysBackendUserRmsRole{}

	_sysBackendUserRmsRole.sysBackendUserRmsRoleDo.UseDB(db, opts...)
	_sysBackendUserRmsRole.sysBackendUserRmsRoleDo.UseModel(&model.SysBackendUserRmsRole{})

	tableName := _sysBackendUserRmsRole.sysBackendUserRmsRoleDo.TableName()
	_sysBackendUserRmsRole.ALL = field.NewAsterisk(tableName)
	_sysBackendUserRmsRole.ID = field.NewInt64(tableName, "id")
	_sysBackendUserRmsRole.RmsBackendUserID = field.NewInt64(tableName, "rms_backend_user_id")
	_sysBackendUserRmsRole.RmsRoleID = field.NewInt64(tableName, "rms_role_id")

	_sysBackendUserRmsRole.fillFieldMap()

	return _sysBackendUserRmsRole
}

type sysBackendUserRmsRole struct {
	sysBackendUserRmsRoleDo

	ALL              field.Asterisk
	ID               field.Int64
	RmsBackendUserID field.Int64
	RmsRoleID        field.Int64

	fieldMap map[string]field.Expr
}

func (s sysBackendUserRmsRole) Table(newTableName string) *sysBackendUserRmsRole {
	s.sysBackendUserRmsRoleDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysBackendUserRmsRole) As(alias string) *sysBackendUserRmsRole {
	s.sysBackendUserRmsRoleDo.DO = *(s.sysBackendUserRmsRoleDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysBackendUserRmsRole) updateTableName(table string) *sysBackendUserRmsRole {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.RmsBackendUserID = field.NewInt64(table, "rms_backend_user_id")
	s.RmsRoleID = field.NewInt64(table, "rms_role_id")

	s.fillFieldMap()

	return s
}

func (s *sysBackendUserRmsRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysBackendUserRmsRole) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["rms_backend_user_id"] = s.RmsBackendUserID
	s.fieldMap["rms_role_id"] = s.RmsRoleID
}

func (s sysBackendUserRmsRole) clone(db *gorm.DB) sysBackendUserRmsRole {
	s.sysBackendUserRmsRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysBackendUserRmsRole) replaceDB(db *gorm.DB) sysBackendUserRmsRole {
	s.sysBackendUserRmsRoleDo.ReplaceDB(db)
	return s
}

type sysBackendUserRmsRoleDo struct{ gen.DO }

type ISysBackendUserRmsRoleDo interface {
	gen.SubQuery
	Debug() ISysBackendUserRmsRoleDo
	WithContext(ctx context.Context) ISysBackendUserRmsRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysBackendUserRmsRoleDo
	WriteDB() ISysBackendUserRmsRoleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysBackendUserRmsRoleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysBackendUserRmsRoleDo
	Not(conds ...gen.Condition) ISysBackendUserRmsRoleDo
	Or(conds ...gen.Condition) ISysBackendUserRmsRoleDo
	Select(conds ...field.Expr) ISysBackendUserRmsRoleDo
	Where(conds ...gen.Condition) ISysBackendUserRmsRoleDo
	Order(conds ...field.Expr) ISysBackendUserRmsRoleDo
	Distinct(cols ...field.Expr) ISysBackendUserRmsRoleDo
	Omit(cols ...field.Expr) ISysBackendUserRmsRoleDo
	Join(table schema.Tabler, on ...field.Expr) ISysBackendUserRmsRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysBackendUserRmsRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysBackendUserRmsRoleDo
	Group(cols ...field.Expr) ISysBackendUserRmsRoleDo
	Having(conds ...gen.Condition) ISysBackendUserRmsRoleDo
	Limit(limit int) ISysBackendUserRmsRoleDo
	Offset(offset int) ISysBackendUserRmsRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysBackendUserRmsRoleDo
	Unscoped() ISysBackendUserRmsRoleDo
	Create(values ...*model.SysBackendUserRmsRole) error
	CreateInBatches(values []*model.SysBackendUserRmsRole, batchSize int) error
	Save(values ...*model.SysBackendUserRmsRole) error
	First() (*model.SysBackendUserRmsRole, error)
	Take() (*model.SysBackendUserRmsRole, error)
	Last() (*model.SysBackendUserRmsRole, error)
	Find() ([]*model.SysBackendUserRmsRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysBackendUserRmsRole, err error)
	FindInBatches(result *[]*model.SysBackendUserRmsRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysBackendUserRmsRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysBackendUserRmsRoleDo
	Assign(attrs ...field.AssignExpr) ISysBackendUserRmsRoleDo
	Joins(fields ...field.RelationField) ISysBackendUserRmsRoleDo
	Preload(fields ...field.RelationField) ISysBackendUserRmsRoleDo
	FirstOrInit() (*model.SysBackendUserRmsRole, error)
	FirstOrCreate() (*model.SysBackendUserRmsRole, error)
	FindByPage(offset int, limit int) (result []*model.SysBackendUserRmsRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysBackendUserRmsRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysBackendUserRmsRoleDo) Debug() ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.Debug())
}

func (s sysBackendUserRmsRoleDo) WithContext(ctx context.Context) ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysBackendUserRmsRoleDo) ReadDB() ISysBackendUserRmsRoleDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysBackendUserRmsRoleDo) WriteDB() ISysBackendUserRmsRoleDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysBackendUserRmsRoleDo) Session(config *gorm.Session) ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysBackendUserRmsRoleDo) Clauses(conds ...clause.Expression) ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysBackendUserRmsRoleDo) Returning(value interface{}, columns ...string) ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysBackendUserRmsRoleDo) Not(conds ...gen.Condition) ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysBackendUserRmsRoleDo) Or(conds ...gen.Condition) ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysBackendUserRmsRoleDo) Select(conds ...field.Expr) ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysBackendUserRmsRoleDo) Where(conds ...gen.Condition) ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysBackendUserRmsRoleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysBackendUserRmsRoleDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysBackendUserRmsRoleDo) Order(conds ...field.Expr) ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysBackendUserRmsRoleDo) Distinct(cols ...field.Expr) ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysBackendUserRmsRoleDo) Omit(cols ...field.Expr) ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysBackendUserRmsRoleDo) Join(table schema.Tabler, on ...field.Expr) ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysBackendUserRmsRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysBackendUserRmsRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysBackendUserRmsRoleDo) Group(cols ...field.Expr) ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysBackendUserRmsRoleDo) Having(conds ...gen.Condition) ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysBackendUserRmsRoleDo) Limit(limit int) ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysBackendUserRmsRoleDo) Offset(offset int) ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysBackendUserRmsRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysBackendUserRmsRoleDo) Unscoped() ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysBackendUserRmsRoleDo) Create(values ...*model.SysBackendUserRmsRole) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysBackendUserRmsRoleDo) CreateInBatches(values []*model.SysBackendUserRmsRole, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysBackendUserRmsRoleDo) Save(values ...*model.SysBackendUserRmsRole) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysBackendUserRmsRoleDo) First() (*model.SysBackendUserRmsRole, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysBackendUserRmsRole), nil
	}
}

func (s sysBackendUserRmsRoleDo) Take() (*model.SysBackendUserRmsRole, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysBackendUserRmsRole), nil
	}
}

func (s sysBackendUserRmsRoleDo) Last() (*model.SysBackendUserRmsRole, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysBackendUserRmsRole), nil
	}
}

func (s sysBackendUserRmsRoleDo) Find() ([]*model.SysBackendUserRmsRole, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysBackendUserRmsRole), err
}

func (s sysBackendUserRmsRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysBackendUserRmsRole, err error) {
	buf := make([]*model.SysBackendUserRmsRole, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysBackendUserRmsRoleDo) FindInBatches(result *[]*model.SysBackendUserRmsRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysBackendUserRmsRoleDo) Attrs(attrs ...field.AssignExpr) ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysBackendUserRmsRoleDo) Assign(attrs ...field.AssignExpr) ISysBackendUserRmsRoleDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysBackendUserRmsRoleDo) Joins(fields ...field.RelationField) ISysBackendUserRmsRoleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysBackendUserRmsRoleDo) Preload(fields ...field.RelationField) ISysBackendUserRmsRoleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysBackendUserRmsRoleDo) FirstOrInit() (*model.SysBackendUserRmsRole, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysBackendUserRmsRole), nil
	}
}

func (s sysBackendUserRmsRoleDo) FirstOrCreate() (*model.SysBackendUserRmsRole, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysBackendUserRmsRole), nil
	}
}

func (s sysBackendUserRmsRoleDo) FindByPage(offset int, limit int) (result []*model.SysBackendUserRmsRole, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysBackendUserRmsRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysBackendUserRmsRoleDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysBackendUserRmsRoleDo) Delete(models ...*model.SysBackendUserRmsRole) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysBackendUserRmsRoleDo) withDO(do gen.Dao) *sysBackendUserRmsRoleDo {
	s.DO = *do.(*gen.DO)
	return s
}
