// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newSysRoleResourceRel(db *gorm.DB, opts ...gen.DOOption) sysRoleResourceRel {
	_sysRoleResourceRel := sysRoleResourceRel{}

	_sysRoleResourceRel.sysRoleResourceRelDo.UseDB(db, opts...)
	_sysRoleResourceRel.sysRoleResourceRelDo.UseModel(&model.SysRoleResourceRel{})

	tableName := _sysRoleResourceRel.sysRoleResourceRelDo.TableName()
	_sysRoleResourceRel.ALL = field.NewAsterisk(tableName)
	_sysRoleResourceRel.ID = field.NewInt64(tableName, "id")
	_sysRoleResourceRel.RoleID = field.NewInt64(tableName, "role_id")
	_sysRoleResourceRel.ResourceID = field.NewInt64(tableName, "resource_id")
	_sysRoleResourceRel.Created = field.NewTime(tableName, "created")

	_sysRoleResourceRel.fillFieldMap()

	return _sysRoleResourceRel
}

type sysRoleResourceRel struct {
	sysRoleResourceRelDo

	ALL        field.Asterisk
	ID         field.Int64
	RoleID     field.Int64
	ResourceID field.Int64
	Created    field.Time

	fieldMap map[string]field.Expr
}

func (s sysRoleResourceRel) Table(newTableName string) *sysRoleResourceRel {
	s.sysRoleResourceRelDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysRoleResourceRel) As(alias string) *sysRoleResourceRel {
	s.sysRoleResourceRelDo.DO = *(s.sysRoleResourceRelDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysRoleResourceRel) updateTableName(table string) *sysRoleResourceRel {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.RoleID = field.NewInt64(table, "role_id")
	s.ResourceID = field.NewInt64(table, "resource_id")
	s.Created = field.NewTime(table, "created")

	s.fillFieldMap()

	return s
}

func (s *sysRoleResourceRel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysRoleResourceRel) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["role_id"] = s.RoleID
	s.fieldMap["resource_id"] = s.ResourceID
	s.fieldMap["created"] = s.Created
}

func (s sysRoleResourceRel) clone(db *gorm.DB) sysRoleResourceRel {
	s.sysRoleResourceRelDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysRoleResourceRel) replaceDB(db *gorm.DB) sysRoleResourceRel {
	s.sysRoleResourceRelDo.ReplaceDB(db)
	return s
}

type sysRoleResourceRelDo struct{ gen.DO }

type ISysRoleResourceRelDo interface {
	gen.SubQuery
	Debug() ISysRoleResourceRelDo
	WithContext(ctx context.Context) ISysRoleResourceRelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysRoleResourceRelDo
	WriteDB() ISysRoleResourceRelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysRoleResourceRelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysRoleResourceRelDo
	Not(conds ...gen.Condition) ISysRoleResourceRelDo
	Or(conds ...gen.Condition) ISysRoleResourceRelDo
	Select(conds ...field.Expr) ISysRoleResourceRelDo
	Where(conds ...gen.Condition) ISysRoleResourceRelDo
	Order(conds ...field.Expr) ISysRoleResourceRelDo
	Distinct(cols ...field.Expr) ISysRoleResourceRelDo
	Omit(cols ...field.Expr) ISysRoleResourceRelDo
	Join(table schema.Tabler, on ...field.Expr) ISysRoleResourceRelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysRoleResourceRelDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysRoleResourceRelDo
	Group(cols ...field.Expr) ISysRoleResourceRelDo
	Having(conds ...gen.Condition) ISysRoleResourceRelDo
	Limit(limit int) ISysRoleResourceRelDo
	Offset(offset int) ISysRoleResourceRelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysRoleResourceRelDo
	Unscoped() ISysRoleResourceRelDo
	Create(values ...*model.SysRoleResourceRel) error
	CreateInBatches(values []*model.SysRoleResourceRel, batchSize int) error
	Save(values ...*model.SysRoleResourceRel) error
	First() (*model.SysRoleResourceRel, error)
	Take() (*model.SysRoleResourceRel, error)
	Last() (*model.SysRoleResourceRel, error)
	Find() ([]*model.SysRoleResourceRel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysRoleResourceRel, err error)
	FindInBatches(result *[]*model.SysRoleResourceRel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysRoleResourceRel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysRoleResourceRelDo
	Assign(attrs ...field.AssignExpr) ISysRoleResourceRelDo
	Joins(fields ...field.RelationField) ISysRoleResourceRelDo
	Preload(fields ...field.RelationField) ISysRoleResourceRelDo
	FirstOrInit() (*model.SysRoleResourceRel, error)
	FirstOrCreate() (*model.SysRoleResourceRel, error)
	FindByPage(offset int, limit int) (result []*model.SysRoleResourceRel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysRoleResourceRelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysRoleResourceRelDo) Debug() ISysRoleResourceRelDo {
	return s.withDO(s.DO.Debug())
}

func (s sysRoleResourceRelDo) WithContext(ctx context.Context) ISysRoleResourceRelDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysRoleResourceRelDo) ReadDB() ISysRoleResourceRelDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysRoleResourceRelDo) WriteDB() ISysRoleResourceRelDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysRoleResourceRelDo) Session(config *gorm.Session) ISysRoleResourceRelDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysRoleResourceRelDo) Clauses(conds ...clause.Expression) ISysRoleResourceRelDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysRoleResourceRelDo) Returning(value interface{}, columns ...string) ISysRoleResourceRelDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysRoleResourceRelDo) Not(conds ...gen.Condition) ISysRoleResourceRelDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysRoleResourceRelDo) Or(conds ...gen.Condition) ISysRoleResourceRelDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysRoleResourceRelDo) Select(conds ...field.Expr) ISysRoleResourceRelDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysRoleResourceRelDo) Where(conds ...gen.Condition) ISysRoleResourceRelDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysRoleResourceRelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysRoleResourceRelDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysRoleResourceRelDo) Order(conds ...field.Expr) ISysRoleResourceRelDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysRoleResourceRelDo) Distinct(cols ...field.Expr) ISysRoleResourceRelDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysRoleResourceRelDo) Omit(cols ...field.Expr) ISysRoleResourceRelDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysRoleResourceRelDo) Join(table schema.Tabler, on ...field.Expr) ISysRoleResourceRelDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysRoleResourceRelDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysRoleResourceRelDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysRoleResourceRelDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysRoleResourceRelDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysRoleResourceRelDo) Group(cols ...field.Expr) ISysRoleResourceRelDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysRoleResourceRelDo) Having(conds ...gen.Condition) ISysRoleResourceRelDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysRoleResourceRelDo) Limit(limit int) ISysRoleResourceRelDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysRoleResourceRelDo) Offset(offset int) ISysRoleResourceRelDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysRoleResourceRelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysRoleResourceRelDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysRoleResourceRelDo) Unscoped() ISysRoleResourceRelDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysRoleResourceRelDo) Create(values ...*model.SysRoleResourceRel) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysRoleResourceRelDo) CreateInBatches(values []*model.SysRoleResourceRel, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysRoleResourceRelDo) Save(values ...*model.SysRoleResourceRel) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysRoleResourceRelDo) First() (*model.SysRoleResourceRel, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRoleResourceRel), nil
	}
}

func (s sysRoleResourceRelDo) Take() (*model.SysRoleResourceRel, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRoleResourceRel), nil
	}
}

func (s sysRoleResourceRelDo) Last() (*model.SysRoleResourceRel, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRoleResourceRel), nil
	}
}

func (s sysRoleResourceRelDo) Find() ([]*model.SysRoleResourceRel, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysRoleResourceRel), err
}

func (s sysRoleResourceRelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysRoleResourceRel, err error) {
	buf := make([]*model.SysRoleResourceRel, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysRoleResourceRelDo) FindInBatches(result *[]*model.SysRoleResourceRel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysRoleResourceRelDo) Attrs(attrs ...field.AssignExpr) ISysRoleResourceRelDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysRoleResourceRelDo) Assign(attrs ...field.AssignExpr) ISysRoleResourceRelDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysRoleResourceRelDo) Joins(fields ...field.RelationField) ISysRoleResourceRelDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysRoleResourceRelDo) Preload(fields ...field.RelationField) ISysRoleResourceRelDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysRoleResourceRelDo) FirstOrInit() (*model.SysRoleResourceRel, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRoleResourceRel), nil
	}
}

func (s sysRoleResourceRelDo) FirstOrCreate() (*model.SysRoleResourceRel, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRoleResourceRel), nil
	}
}

func (s sysRoleResourceRelDo) FindByPage(offset int, limit int) (result []*model.SysRoleResourceRel, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysRoleResourceRelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysRoleResourceRelDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysRoleResourceRelDo) Delete(models ...*model.SysRoleResourceRel) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysRoleResourceRelDo) withDO(do gen.Dao) *sysRoleResourceRelDo {
	s.DO = *do.(*gen.DO)
	return s
}
