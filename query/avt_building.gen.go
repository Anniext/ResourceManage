// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newAvtBuilding(db *gorm.DB, opts ...gen.DOOption) avtBuilding {
	_avtBuilding := avtBuilding{}

	_avtBuilding.avtBuildingDo.UseDB(db, opts...)
	_avtBuilding.avtBuildingDo.UseModel(&model.AvtBuilding{})

	tableName := _avtBuilding.avtBuildingDo.TableName()
	_avtBuilding.ALL = field.NewAsterisk(tableName)
	_avtBuilding.ID = field.NewInt64(tableName, "id")
	_avtBuilding.Name = field.NewString(tableName, "name")
	_avtBuilding.IsDelete = field.NewInt64(tableName, "is_delete")
	_avtBuilding.Sort = field.NewInt64(tableName, "sort")

	_avtBuilding.fillFieldMap()

	return _avtBuilding
}

type avtBuilding struct {
	avtBuildingDo

	ALL      field.Asterisk
	ID       field.Int64
	Name     field.String
	IsDelete field.Int64 // 0-未删除；1-删除
	Sort     field.Int64 // 越大越靠前

	fieldMap map[string]field.Expr
}

func (a avtBuilding) Table(newTableName string) *avtBuilding {
	a.avtBuildingDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a avtBuilding) As(alias string) *avtBuilding {
	a.avtBuildingDo.DO = *(a.avtBuildingDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *avtBuilding) updateTableName(table string) *avtBuilding {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.IsDelete = field.NewInt64(table, "is_delete")
	a.Sort = field.NewInt64(table, "sort")

	a.fillFieldMap()

	return a
}

func (a *avtBuilding) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *avtBuilding) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["is_delete"] = a.IsDelete
	a.fieldMap["sort"] = a.Sort
}

func (a avtBuilding) clone(db *gorm.DB) avtBuilding {
	a.avtBuildingDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a avtBuilding) replaceDB(db *gorm.DB) avtBuilding {
	a.avtBuildingDo.ReplaceDB(db)
	return a
}

type avtBuildingDo struct{ gen.DO }

type IAvtBuildingDo interface {
	gen.SubQuery
	Debug() IAvtBuildingDo
	WithContext(ctx context.Context) IAvtBuildingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAvtBuildingDo
	WriteDB() IAvtBuildingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAvtBuildingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAvtBuildingDo
	Not(conds ...gen.Condition) IAvtBuildingDo
	Or(conds ...gen.Condition) IAvtBuildingDo
	Select(conds ...field.Expr) IAvtBuildingDo
	Where(conds ...gen.Condition) IAvtBuildingDo
	Order(conds ...field.Expr) IAvtBuildingDo
	Distinct(cols ...field.Expr) IAvtBuildingDo
	Omit(cols ...field.Expr) IAvtBuildingDo
	Join(table schema.Tabler, on ...field.Expr) IAvtBuildingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAvtBuildingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAvtBuildingDo
	Group(cols ...field.Expr) IAvtBuildingDo
	Having(conds ...gen.Condition) IAvtBuildingDo
	Limit(limit int) IAvtBuildingDo
	Offset(offset int) IAvtBuildingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtBuildingDo
	Unscoped() IAvtBuildingDo
	Create(values ...*model.AvtBuilding) error
	CreateInBatches(values []*model.AvtBuilding, batchSize int) error
	Save(values ...*model.AvtBuilding) error
	First() (*model.AvtBuilding, error)
	Take() (*model.AvtBuilding, error)
	Last() (*model.AvtBuilding, error)
	Find() ([]*model.AvtBuilding, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtBuilding, err error)
	FindInBatches(result *[]*model.AvtBuilding, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AvtBuilding) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAvtBuildingDo
	Assign(attrs ...field.AssignExpr) IAvtBuildingDo
	Joins(fields ...field.RelationField) IAvtBuildingDo
	Preload(fields ...field.RelationField) IAvtBuildingDo
	FirstOrInit() (*model.AvtBuilding, error)
	FirstOrCreate() (*model.AvtBuilding, error)
	FindByPage(offset int, limit int) (result []*model.AvtBuilding, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAvtBuildingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a avtBuildingDo) Debug() IAvtBuildingDo {
	return a.withDO(a.DO.Debug())
}

func (a avtBuildingDo) WithContext(ctx context.Context) IAvtBuildingDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a avtBuildingDo) ReadDB() IAvtBuildingDo {
	return a.Clauses(dbresolver.Read)
}

func (a avtBuildingDo) WriteDB() IAvtBuildingDo {
	return a.Clauses(dbresolver.Write)
}

func (a avtBuildingDo) Session(config *gorm.Session) IAvtBuildingDo {
	return a.withDO(a.DO.Session(config))
}

func (a avtBuildingDo) Clauses(conds ...clause.Expression) IAvtBuildingDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a avtBuildingDo) Returning(value interface{}, columns ...string) IAvtBuildingDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a avtBuildingDo) Not(conds ...gen.Condition) IAvtBuildingDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a avtBuildingDo) Or(conds ...gen.Condition) IAvtBuildingDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a avtBuildingDo) Select(conds ...field.Expr) IAvtBuildingDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a avtBuildingDo) Where(conds ...gen.Condition) IAvtBuildingDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a avtBuildingDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAvtBuildingDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a avtBuildingDo) Order(conds ...field.Expr) IAvtBuildingDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a avtBuildingDo) Distinct(cols ...field.Expr) IAvtBuildingDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a avtBuildingDo) Omit(cols ...field.Expr) IAvtBuildingDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a avtBuildingDo) Join(table schema.Tabler, on ...field.Expr) IAvtBuildingDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a avtBuildingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAvtBuildingDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a avtBuildingDo) RightJoin(table schema.Tabler, on ...field.Expr) IAvtBuildingDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a avtBuildingDo) Group(cols ...field.Expr) IAvtBuildingDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a avtBuildingDo) Having(conds ...gen.Condition) IAvtBuildingDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a avtBuildingDo) Limit(limit int) IAvtBuildingDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a avtBuildingDo) Offset(offset int) IAvtBuildingDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a avtBuildingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtBuildingDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a avtBuildingDo) Unscoped() IAvtBuildingDo {
	return a.withDO(a.DO.Unscoped())
}

func (a avtBuildingDo) Create(values ...*model.AvtBuilding) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a avtBuildingDo) CreateInBatches(values []*model.AvtBuilding, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a avtBuildingDo) Save(values ...*model.AvtBuilding) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a avtBuildingDo) First() (*model.AvtBuilding, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtBuilding), nil
	}
}

func (a avtBuildingDo) Take() (*model.AvtBuilding, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtBuilding), nil
	}
}

func (a avtBuildingDo) Last() (*model.AvtBuilding, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtBuilding), nil
	}
}

func (a avtBuildingDo) Find() ([]*model.AvtBuilding, error) {
	result, err := a.DO.Find()
	return result.([]*model.AvtBuilding), err
}

func (a avtBuildingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtBuilding, err error) {
	buf := make([]*model.AvtBuilding, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a avtBuildingDo) FindInBatches(result *[]*model.AvtBuilding, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a avtBuildingDo) Attrs(attrs ...field.AssignExpr) IAvtBuildingDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a avtBuildingDo) Assign(attrs ...field.AssignExpr) IAvtBuildingDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a avtBuildingDo) Joins(fields ...field.RelationField) IAvtBuildingDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a avtBuildingDo) Preload(fields ...field.RelationField) IAvtBuildingDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a avtBuildingDo) FirstOrInit() (*model.AvtBuilding, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtBuilding), nil
	}
}

func (a avtBuildingDo) FirstOrCreate() (*model.AvtBuilding, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtBuilding), nil
	}
}

func (a avtBuildingDo) FindByPage(offset int, limit int) (result []*model.AvtBuilding, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a avtBuildingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a avtBuildingDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a avtBuildingDo) Delete(models ...*model.AvtBuilding) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *avtBuildingDo) withDO(do gen.Dao) *avtBuildingDo {
	a.DO = *do.(*gen.DO)
	return a
}
