// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newAvtJoinnum(db *gorm.DB, opts ...gen.DOOption) avtJoinnum {
	_avtJoinnum := avtJoinnum{}

	_avtJoinnum.avtJoinnumDo.UseDB(db, opts...)
	_avtJoinnum.avtJoinnumDo.UseModel(&model.AvtJoinnum{})

	tableName := _avtJoinnum.avtJoinnumDo.TableName()
	_avtJoinnum.ALL = field.NewAsterisk(tableName)
	_avtJoinnum.ID = field.NewInt64(tableName, "id")
	_avtJoinnum.Group_ = field.NewInt64(tableName, "group")
	_avtJoinnum.JoinNum = field.NewInt64(tableName, "join_num")
	_avtJoinnum.EquipmentType = field.NewInt64(tableName, "equipment_type")
	_avtJoinnum.EquipmentName = field.NewString(tableName, "equipment_name")
	_avtJoinnum.Name = field.NewString(tableName, "name")
	_avtJoinnum.RoomID = field.NewInt64(tableName, "room_id")
	_avtJoinnum.Sort = field.NewInt64(tableName, "sort")
	_avtJoinnum.ShowStatus = field.NewInt64(tableName, "show_status")
	_avtJoinnum.ValueEnum = field.NewString(tableName, "value_enum")
	_avtJoinnum.ValueType = field.NewString(tableName, "value_type")
	_avtJoinnum.JoinnumType = field.NewInt64(tableName, "joinnum_type")
	_avtJoinnum.ButtonType = field.NewInt64(tableName, "button_type")

	_avtJoinnum.fillFieldMap()

	return _avtJoinnum
}

type avtJoinnum struct {
	avtJoinnumDo

	ALL           field.Asterisk
	ID            field.Int64
	Group_        field.Int64 // 设备组序号
	JoinNum       field.Int64
	EquipmentType field.Int64 // 1-灯光；2-空调；3-窗帘；4-投影仪；5-幕布；6-电脑一体机；7-录播主机；8-大屏；9-功放；10-六合一传感器；11-电流电压传感器；12-触摸屏；13-ip电话；14-电子班牌；15-门禁；16-学生摄像头；17-老师摄像头
	EquipmentName field.String
	Name          field.String // 功能名称
	RoomID        field.Int64
	Sort          field.Int64
	ShowStatus    field.Int64  // 是否显示在设备列表：0-不显示，1-显示，2-故障joinnum
	ValueEnum     field.String // 0:关,1:开
	ValueType     field.String // 类型type  1: bool值 2: int/float值 3: 二进制串(暂不支持)
	JoinnumType   field.Int64  // 1-普通属性；2-控制属性；3-故障属性
	ButtonType    field.Int64  // 前端显示的按钮类型：1-开关类；2-分段式（分段式需要配置json）；3:-组合，音量+，音量-

	fieldMap map[string]field.Expr
}

func (a avtJoinnum) Table(newTableName string) *avtJoinnum {
	a.avtJoinnumDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a avtJoinnum) As(alias string) *avtJoinnum {
	a.avtJoinnumDo.DO = *(a.avtJoinnumDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *avtJoinnum) updateTableName(table string) *avtJoinnum {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Group_ = field.NewInt64(table, "group")
	a.JoinNum = field.NewInt64(table, "join_num")
	a.EquipmentType = field.NewInt64(table, "equipment_type")
	a.EquipmentName = field.NewString(table, "equipment_name")
	a.Name = field.NewString(table, "name")
	a.RoomID = field.NewInt64(table, "room_id")
	a.Sort = field.NewInt64(table, "sort")
	a.ShowStatus = field.NewInt64(table, "show_status")
	a.ValueEnum = field.NewString(table, "value_enum")
	a.ValueType = field.NewString(table, "value_type")
	a.JoinnumType = field.NewInt64(table, "joinnum_type")
	a.ButtonType = field.NewInt64(table, "button_type")

	a.fillFieldMap()

	return a
}

func (a *avtJoinnum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *avtJoinnum) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 13)
	a.fieldMap["id"] = a.ID
	a.fieldMap["group"] = a.Group_
	a.fieldMap["join_num"] = a.JoinNum
	a.fieldMap["equipment_type"] = a.EquipmentType
	a.fieldMap["equipment_name"] = a.EquipmentName
	a.fieldMap["name"] = a.Name
	a.fieldMap["room_id"] = a.RoomID
	a.fieldMap["sort"] = a.Sort
	a.fieldMap["show_status"] = a.ShowStatus
	a.fieldMap["value_enum"] = a.ValueEnum
	a.fieldMap["value_type"] = a.ValueType
	a.fieldMap["joinnum_type"] = a.JoinnumType
	a.fieldMap["button_type"] = a.ButtonType
}

func (a avtJoinnum) clone(db *gorm.DB) avtJoinnum {
	a.avtJoinnumDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a avtJoinnum) replaceDB(db *gorm.DB) avtJoinnum {
	a.avtJoinnumDo.ReplaceDB(db)
	return a
}

type avtJoinnumDo struct{ gen.DO }

type IAvtJoinnumDo interface {
	gen.SubQuery
	Debug() IAvtJoinnumDo
	WithContext(ctx context.Context) IAvtJoinnumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAvtJoinnumDo
	WriteDB() IAvtJoinnumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAvtJoinnumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAvtJoinnumDo
	Not(conds ...gen.Condition) IAvtJoinnumDo
	Or(conds ...gen.Condition) IAvtJoinnumDo
	Select(conds ...field.Expr) IAvtJoinnumDo
	Where(conds ...gen.Condition) IAvtJoinnumDo
	Order(conds ...field.Expr) IAvtJoinnumDo
	Distinct(cols ...field.Expr) IAvtJoinnumDo
	Omit(cols ...field.Expr) IAvtJoinnumDo
	Join(table schema.Tabler, on ...field.Expr) IAvtJoinnumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAvtJoinnumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAvtJoinnumDo
	Group(cols ...field.Expr) IAvtJoinnumDo
	Having(conds ...gen.Condition) IAvtJoinnumDo
	Limit(limit int) IAvtJoinnumDo
	Offset(offset int) IAvtJoinnumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtJoinnumDo
	Unscoped() IAvtJoinnumDo
	Create(values ...*model.AvtJoinnum) error
	CreateInBatches(values []*model.AvtJoinnum, batchSize int) error
	Save(values ...*model.AvtJoinnum) error
	First() (*model.AvtJoinnum, error)
	Take() (*model.AvtJoinnum, error)
	Last() (*model.AvtJoinnum, error)
	Find() ([]*model.AvtJoinnum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtJoinnum, err error)
	FindInBatches(result *[]*model.AvtJoinnum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AvtJoinnum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAvtJoinnumDo
	Assign(attrs ...field.AssignExpr) IAvtJoinnumDo
	Joins(fields ...field.RelationField) IAvtJoinnumDo
	Preload(fields ...field.RelationField) IAvtJoinnumDo
	FirstOrInit() (*model.AvtJoinnum, error)
	FirstOrCreate() (*model.AvtJoinnum, error)
	FindByPage(offset int, limit int) (result []*model.AvtJoinnum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAvtJoinnumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a avtJoinnumDo) Debug() IAvtJoinnumDo {
	return a.withDO(a.DO.Debug())
}

func (a avtJoinnumDo) WithContext(ctx context.Context) IAvtJoinnumDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a avtJoinnumDo) ReadDB() IAvtJoinnumDo {
	return a.Clauses(dbresolver.Read)
}

func (a avtJoinnumDo) WriteDB() IAvtJoinnumDo {
	return a.Clauses(dbresolver.Write)
}

func (a avtJoinnumDo) Session(config *gorm.Session) IAvtJoinnumDo {
	return a.withDO(a.DO.Session(config))
}

func (a avtJoinnumDo) Clauses(conds ...clause.Expression) IAvtJoinnumDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a avtJoinnumDo) Returning(value interface{}, columns ...string) IAvtJoinnumDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a avtJoinnumDo) Not(conds ...gen.Condition) IAvtJoinnumDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a avtJoinnumDo) Or(conds ...gen.Condition) IAvtJoinnumDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a avtJoinnumDo) Select(conds ...field.Expr) IAvtJoinnumDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a avtJoinnumDo) Where(conds ...gen.Condition) IAvtJoinnumDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a avtJoinnumDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAvtJoinnumDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a avtJoinnumDo) Order(conds ...field.Expr) IAvtJoinnumDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a avtJoinnumDo) Distinct(cols ...field.Expr) IAvtJoinnumDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a avtJoinnumDo) Omit(cols ...field.Expr) IAvtJoinnumDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a avtJoinnumDo) Join(table schema.Tabler, on ...field.Expr) IAvtJoinnumDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a avtJoinnumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAvtJoinnumDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a avtJoinnumDo) RightJoin(table schema.Tabler, on ...field.Expr) IAvtJoinnumDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a avtJoinnumDo) Group(cols ...field.Expr) IAvtJoinnumDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a avtJoinnumDo) Having(conds ...gen.Condition) IAvtJoinnumDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a avtJoinnumDo) Limit(limit int) IAvtJoinnumDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a avtJoinnumDo) Offset(offset int) IAvtJoinnumDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a avtJoinnumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtJoinnumDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a avtJoinnumDo) Unscoped() IAvtJoinnumDo {
	return a.withDO(a.DO.Unscoped())
}

func (a avtJoinnumDo) Create(values ...*model.AvtJoinnum) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a avtJoinnumDo) CreateInBatches(values []*model.AvtJoinnum, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a avtJoinnumDo) Save(values ...*model.AvtJoinnum) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a avtJoinnumDo) First() (*model.AvtJoinnum, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtJoinnum), nil
	}
}

func (a avtJoinnumDo) Take() (*model.AvtJoinnum, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtJoinnum), nil
	}
}

func (a avtJoinnumDo) Last() (*model.AvtJoinnum, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtJoinnum), nil
	}
}

func (a avtJoinnumDo) Find() ([]*model.AvtJoinnum, error) {
	result, err := a.DO.Find()
	return result.([]*model.AvtJoinnum), err
}

func (a avtJoinnumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtJoinnum, err error) {
	buf := make([]*model.AvtJoinnum, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a avtJoinnumDo) FindInBatches(result *[]*model.AvtJoinnum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a avtJoinnumDo) Attrs(attrs ...field.AssignExpr) IAvtJoinnumDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a avtJoinnumDo) Assign(attrs ...field.AssignExpr) IAvtJoinnumDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a avtJoinnumDo) Joins(fields ...field.RelationField) IAvtJoinnumDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a avtJoinnumDo) Preload(fields ...field.RelationField) IAvtJoinnumDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a avtJoinnumDo) FirstOrInit() (*model.AvtJoinnum, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtJoinnum), nil
	}
}

func (a avtJoinnumDo) FirstOrCreate() (*model.AvtJoinnum, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtJoinnum), nil
	}
}

func (a avtJoinnumDo) FindByPage(offset int, limit int) (result []*model.AvtJoinnum, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a avtJoinnumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a avtJoinnumDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a avtJoinnumDo) Delete(models ...*model.AvtJoinnum) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *avtJoinnumDo) withDO(do gen.Dao) *avtJoinnumDo {
	a.DO = *do.(*gen.DO)
	return a
}
