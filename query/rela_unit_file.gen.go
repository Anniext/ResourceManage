// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newRelaUnitFile(db *gorm.DB, opts ...gen.DOOption) relaUnitFile {
	_relaUnitFile := relaUnitFile{}

	_relaUnitFile.relaUnitFileDo.UseDB(db, opts...)
	_relaUnitFile.relaUnitFileDo.UseModel(&model.RelaUnitFile{})

	tableName := _relaUnitFile.relaUnitFileDo.TableName()
	_relaUnitFile.ALL = field.NewAsterisk(tableName)
	_relaUnitFile.ID = field.NewInt64(tableName, "id")
	_relaUnitFile.UnitID = field.NewInt64(tableName, "unit_id")
	_relaUnitFile.FileID = field.NewInt64(tableName, "file_id")
	_relaUnitFile.CreateTime = field.NewTime(tableName, "create_time")
	_relaUnitFile.UpdateTime = field.NewTime(tableName, "update_time")

	_relaUnitFile.fillFieldMap()

	return _relaUnitFile
}

type relaUnitFile struct {
	relaUnitFileDo

	ALL        field.Asterisk
	ID         field.Int64 // 关系表id
	UnitID     field.Int64 // 单位ID
	FileID     field.Int64 // 文件id
	CreateTime field.Time  // 创建时间
	UpdateTime field.Time  // 更新时间

	fieldMap map[string]field.Expr
}

func (r relaUnitFile) Table(newTableName string) *relaUnitFile {
	r.relaUnitFileDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r relaUnitFile) As(alias string) *relaUnitFile {
	r.relaUnitFileDo.DO = *(r.relaUnitFileDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *relaUnitFile) updateTableName(table string) *relaUnitFile {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.UnitID = field.NewInt64(table, "unit_id")
	r.FileID = field.NewInt64(table, "file_id")
	r.CreateTime = field.NewTime(table, "create_time")
	r.UpdateTime = field.NewTime(table, "update_time")

	r.fillFieldMap()

	return r
}

func (r *relaUnitFile) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *relaUnitFile) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 5)
	r.fieldMap["id"] = r.ID
	r.fieldMap["unit_id"] = r.UnitID
	r.fieldMap["file_id"] = r.FileID
	r.fieldMap["create_time"] = r.CreateTime
	r.fieldMap["update_time"] = r.UpdateTime
}

func (r relaUnitFile) clone(db *gorm.DB) relaUnitFile {
	r.relaUnitFileDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r relaUnitFile) replaceDB(db *gorm.DB) relaUnitFile {
	r.relaUnitFileDo.ReplaceDB(db)
	return r
}

type relaUnitFileDo struct{ gen.DO }

type IRelaUnitFileDo interface {
	gen.SubQuery
	Debug() IRelaUnitFileDo
	WithContext(ctx context.Context) IRelaUnitFileDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRelaUnitFileDo
	WriteDB() IRelaUnitFileDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRelaUnitFileDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRelaUnitFileDo
	Not(conds ...gen.Condition) IRelaUnitFileDo
	Or(conds ...gen.Condition) IRelaUnitFileDo
	Select(conds ...field.Expr) IRelaUnitFileDo
	Where(conds ...gen.Condition) IRelaUnitFileDo
	Order(conds ...field.Expr) IRelaUnitFileDo
	Distinct(cols ...field.Expr) IRelaUnitFileDo
	Omit(cols ...field.Expr) IRelaUnitFileDo
	Join(table schema.Tabler, on ...field.Expr) IRelaUnitFileDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRelaUnitFileDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRelaUnitFileDo
	Group(cols ...field.Expr) IRelaUnitFileDo
	Having(conds ...gen.Condition) IRelaUnitFileDo
	Limit(limit int) IRelaUnitFileDo
	Offset(offset int) IRelaUnitFileDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRelaUnitFileDo
	Unscoped() IRelaUnitFileDo
	Create(values ...*model.RelaUnitFile) error
	CreateInBatches(values []*model.RelaUnitFile, batchSize int) error
	Save(values ...*model.RelaUnitFile) error
	First() (*model.RelaUnitFile, error)
	Take() (*model.RelaUnitFile, error)
	Last() (*model.RelaUnitFile, error)
	Find() ([]*model.RelaUnitFile, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RelaUnitFile, err error)
	FindInBatches(result *[]*model.RelaUnitFile, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RelaUnitFile) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRelaUnitFileDo
	Assign(attrs ...field.AssignExpr) IRelaUnitFileDo
	Joins(fields ...field.RelationField) IRelaUnitFileDo
	Preload(fields ...field.RelationField) IRelaUnitFileDo
	FirstOrInit() (*model.RelaUnitFile, error)
	FirstOrCreate() (*model.RelaUnitFile, error)
	FindByPage(offset int, limit int) (result []*model.RelaUnitFile, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRelaUnitFileDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r relaUnitFileDo) Debug() IRelaUnitFileDo {
	return r.withDO(r.DO.Debug())
}

func (r relaUnitFileDo) WithContext(ctx context.Context) IRelaUnitFileDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r relaUnitFileDo) ReadDB() IRelaUnitFileDo {
	return r.Clauses(dbresolver.Read)
}

func (r relaUnitFileDo) WriteDB() IRelaUnitFileDo {
	return r.Clauses(dbresolver.Write)
}

func (r relaUnitFileDo) Session(config *gorm.Session) IRelaUnitFileDo {
	return r.withDO(r.DO.Session(config))
}

func (r relaUnitFileDo) Clauses(conds ...clause.Expression) IRelaUnitFileDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r relaUnitFileDo) Returning(value interface{}, columns ...string) IRelaUnitFileDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r relaUnitFileDo) Not(conds ...gen.Condition) IRelaUnitFileDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r relaUnitFileDo) Or(conds ...gen.Condition) IRelaUnitFileDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r relaUnitFileDo) Select(conds ...field.Expr) IRelaUnitFileDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r relaUnitFileDo) Where(conds ...gen.Condition) IRelaUnitFileDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r relaUnitFileDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRelaUnitFileDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r relaUnitFileDo) Order(conds ...field.Expr) IRelaUnitFileDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r relaUnitFileDo) Distinct(cols ...field.Expr) IRelaUnitFileDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r relaUnitFileDo) Omit(cols ...field.Expr) IRelaUnitFileDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r relaUnitFileDo) Join(table schema.Tabler, on ...field.Expr) IRelaUnitFileDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r relaUnitFileDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRelaUnitFileDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r relaUnitFileDo) RightJoin(table schema.Tabler, on ...field.Expr) IRelaUnitFileDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r relaUnitFileDo) Group(cols ...field.Expr) IRelaUnitFileDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r relaUnitFileDo) Having(conds ...gen.Condition) IRelaUnitFileDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r relaUnitFileDo) Limit(limit int) IRelaUnitFileDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r relaUnitFileDo) Offset(offset int) IRelaUnitFileDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r relaUnitFileDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRelaUnitFileDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r relaUnitFileDo) Unscoped() IRelaUnitFileDo {
	return r.withDO(r.DO.Unscoped())
}

func (r relaUnitFileDo) Create(values ...*model.RelaUnitFile) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r relaUnitFileDo) CreateInBatches(values []*model.RelaUnitFile, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r relaUnitFileDo) Save(values ...*model.RelaUnitFile) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r relaUnitFileDo) First() (*model.RelaUnitFile, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RelaUnitFile), nil
	}
}

func (r relaUnitFileDo) Take() (*model.RelaUnitFile, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RelaUnitFile), nil
	}
}

func (r relaUnitFileDo) Last() (*model.RelaUnitFile, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RelaUnitFile), nil
	}
}

func (r relaUnitFileDo) Find() ([]*model.RelaUnitFile, error) {
	result, err := r.DO.Find()
	return result.([]*model.RelaUnitFile), err
}

func (r relaUnitFileDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RelaUnitFile, err error) {
	buf := make([]*model.RelaUnitFile, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r relaUnitFileDo) FindInBatches(result *[]*model.RelaUnitFile, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r relaUnitFileDo) Attrs(attrs ...field.AssignExpr) IRelaUnitFileDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r relaUnitFileDo) Assign(attrs ...field.AssignExpr) IRelaUnitFileDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r relaUnitFileDo) Joins(fields ...field.RelationField) IRelaUnitFileDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r relaUnitFileDo) Preload(fields ...field.RelationField) IRelaUnitFileDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r relaUnitFileDo) FirstOrInit() (*model.RelaUnitFile, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RelaUnitFile), nil
	}
}

func (r relaUnitFileDo) FirstOrCreate() (*model.RelaUnitFile, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RelaUnitFile), nil
	}
}

func (r relaUnitFileDo) FindByPage(offset int, limit int) (result []*model.RelaUnitFile, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r relaUnitFileDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r relaUnitFileDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r relaUnitFileDo) Delete(models ...*model.RelaUnitFile) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *relaUnitFileDo) withDO(do gen.Dao) *relaUnitFileDo {
	r.DO = *do.(*gen.DO)
	return r
}
