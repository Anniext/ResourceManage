// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newAvtCourseChapter(db *gorm.DB, opts ...gen.DOOption) avtCourseChapter {
	_avtCourseChapter := avtCourseChapter{}

	_avtCourseChapter.avtCourseChapterDo.UseDB(db, opts...)
	_avtCourseChapter.avtCourseChapterDo.UseModel(&model.AvtCourseChapter{})

	tableName := _avtCourseChapter.avtCourseChapterDo.TableName()
	_avtCourseChapter.ALL = field.NewAsterisk(tableName)
	_avtCourseChapter.ID = field.NewInt64(tableName, "id")
	_avtCourseChapter.CourseID = field.NewInt64(tableName, "course_id")
	_avtCourseChapter.Name = field.NewString(tableName, "name")
	_avtCourseChapter.ParentID = field.NewInt64(tableName, "parentId")
	_avtCourseChapter.Type = field.NewInt64(tableName, "type")
	_avtCourseChapter.Status = field.NewInt64(tableName, "status")
	_avtCourseChapter.CreateTime = field.NewTime(tableName, "create_time")
	_avtCourseChapter.Sort = field.NewInt64(tableName, "sort")
	_avtCourseChapter.PlayCount = field.NewInt64(tableName, "play_count")
	_avtCourseChapter.Isfree = field.NewInt64(tableName, "isfree")
	_avtCourseChapter.Videotype = field.NewString(tableName, "videotype")
	_avtCourseChapter.Videourl = field.NewString(tableName, "videourl")
	_avtCourseChapter.Videojson = field.NewString(tableName, "videojson")
	_avtCourseChapter.TeacherID = field.NewInt64(tableName, "teacher_id")
	_avtCourseChapter.CourseHour = field.NewInt64(tableName, "course_hour")
	_avtCourseChapter.CourseMinutes = field.NewInt64(tableName, "course_minutes")
	_avtCourseChapter.CourseSeconds = field.NewInt64(tableName, "course_seconds")
	_avtCourseChapter.FileType = field.NewString(tableName, "file_type")
	_avtCourseChapter.Courseware = field.NewString(tableName, "courseware")
	_avtCourseChapter.Content = field.NewString(tableName, "content")
	_avtCourseChapter.PageCount = field.NewInt64(tableName, "page_count")
	_avtCourseChapter.ExamLink = field.NewString(tableName, "exam_link")
	_avtCourseChapter.TouristIsfree = field.NewInt64(tableName, "tourist_isfree")
	_avtCourseChapter.VideoPwd = field.NewString(tableName, "video_pwd")
	_avtCourseChapter.StartTime = field.NewInt64(tableName, "startTime")
	_avtCourseChapter.EndTime = field.NewInt64(tableName, "endTime")
	_avtCourseChapter.UpdateTime = field.NewTime(tableName, "update_time")
	_avtCourseChapter.Nbtype = field.NewString(tableName, "nbtype")
	_avtCourseChapter.IsDisplay = field.NewInt64(tableName, "is_display")
	_avtCourseChapter.Logo = field.NewString(tableName, "logo")
	_avtCourseChapter.ClassID = field.NewString(tableName, "class_id")
	_avtCourseChapter.RoomID = field.NewInt64(tableName, "room_id")

	_avtCourseChapter.fillFieldMap()

	return _avtCourseChapter
}

type avtCourseChapter struct {
	avtCourseChapterDo

	ALL           field.Asterisk
	ID            field.Int64
	CourseID      field.Int64  // 课程id
	Name          field.String // 节点名称
	ParentID      field.Int64  // 父级ID
	Type          field.Int64  // 0课时节点1是章节
	Status        field.Int64  // 状态0正常1删除
	CreateTime    field.Time   // 添加时间
	Sort          field.Int64  // 显示排序
	PlayCount     field.Int64  // 播放次数
	Isfree        field.Int64  // 是否可以试听1免费2收费
	Videotype     field.String
	Videourl      field.String // 视频地址
	Videojson     field.String // json格式辅助56
	TeacherID     field.Int64  // 讲师id
	CourseHour    field.Int64
	CourseMinutes field.Int64  // 时长：分钟
	CourseSeconds field.Int64  // 时长：秒
	FileType      field.String // VIDEO视频 AUDIO音频 FILE文档 TXT文本 ATLAS图片集
	Courseware    field.String // 讲义下载地址
	Content       field.String // 文本
	PageCount     field.Int64  // 页数
	ExamLink      field.String // è€ƒè¯•è¯•å·é“¾æŽ¥
	TouristIsfree field.Int64  // æ¸¸å®¢è¯•çœ‹ 1æ˜¯ 2å¦
	VideoPwd      field.String // 点播密码
	StartTime     field.Int64  // 直播开始
	EndTime       field.Int64  // 直播结束
	UpdateTime    field.Time
	Nbtype        field.String // 牛邦视频类型
	IsDisplay     field.Int64  // 章节是否显示在课程目录中
	Logo          field.String // 图片路径
	ClassID       field.String
	RoomID        field.Int64 // 对于直播课，需要填写上课教室

	fieldMap map[string]field.Expr
}

func (a avtCourseChapter) Table(newTableName string) *avtCourseChapter {
	a.avtCourseChapterDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a avtCourseChapter) As(alias string) *avtCourseChapter {
	a.avtCourseChapterDo.DO = *(a.avtCourseChapterDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *avtCourseChapter) updateTableName(table string) *avtCourseChapter {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.CourseID = field.NewInt64(table, "course_id")
	a.Name = field.NewString(table, "name")
	a.ParentID = field.NewInt64(table, "parentId")
	a.Type = field.NewInt64(table, "type")
	a.Status = field.NewInt64(table, "status")
	a.CreateTime = field.NewTime(table, "create_time")
	a.Sort = field.NewInt64(table, "sort")
	a.PlayCount = field.NewInt64(table, "play_count")
	a.Isfree = field.NewInt64(table, "isfree")
	a.Videotype = field.NewString(table, "videotype")
	a.Videourl = field.NewString(table, "videourl")
	a.Videojson = field.NewString(table, "videojson")
	a.TeacherID = field.NewInt64(table, "teacher_id")
	a.CourseHour = field.NewInt64(table, "course_hour")
	a.CourseMinutes = field.NewInt64(table, "course_minutes")
	a.CourseSeconds = field.NewInt64(table, "course_seconds")
	a.FileType = field.NewString(table, "file_type")
	a.Courseware = field.NewString(table, "courseware")
	a.Content = field.NewString(table, "content")
	a.PageCount = field.NewInt64(table, "page_count")
	a.ExamLink = field.NewString(table, "exam_link")
	a.TouristIsfree = field.NewInt64(table, "tourist_isfree")
	a.VideoPwd = field.NewString(table, "video_pwd")
	a.StartTime = field.NewInt64(table, "startTime")
	a.EndTime = field.NewInt64(table, "endTime")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.Nbtype = field.NewString(table, "nbtype")
	a.IsDisplay = field.NewInt64(table, "is_display")
	a.Logo = field.NewString(table, "logo")
	a.ClassID = field.NewString(table, "class_id")
	a.RoomID = field.NewInt64(table, "room_id")

	a.fillFieldMap()

	return a
}

func (a *avtCourseChapter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *avtCourseChapter) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 32)
	a.fieldMap["id"] = a.ID
	a.fieldMap["course_id"] = a.CourseID
	a.fieldMap["name"] = a.Name
	a.fieldMap["parentId"] = a.ParentID
	a.fieldMap["type"] = a.Type
	a.fieldMap["status"] = a.Status
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["sort"] = a.Sort
	a.fieldMap["play_count"] = a.PlayCount
	a.fieldMap["isfree"] = a.Isfree
	a.fieldMap["videotype"] = a.Videotype
	a.fieldMap["videourl"] = a.Videourl
	a.fieldMap["videojson"] = a.Videojson
	a.fieldMap["teacher_id"] = a.TeacherID
	a.fieldMap["course_hour"] = a.CourseHour
	a.fieldMap["course_minutes"] = a.CourseMinutes
	a.fieldMap["course_seconds"] = a.CourseSeconds
	a.fieldMap["file_type"] = a.FileType
	a.fieldMap["courseware"] = a.Courseware
	a.fieldMap["content"] = a.Content
	a.fieldMap["page_count"] = a.PageCount
	a.fieldMap["exam_link"] = a.ExamLink
	a.fieldMap["tourist_isfree"] = a.TouristIsfree
	a.fieldMap["video_pwd"] = a.VideoPwd
	a.fieldMap["startTime"] = a.StartTime
	a.fieldMap["endTime"] = a.EndTime
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["nbtype"] = a.Nbtype
	a.fieldMap["is_display"] = a.IsDisplay
	a.fieldMap["logo"] = a.Logo
	a.fieldMap["class_id"] = a.ClassID
	a.fieldMap["room_id"] = a.RoomID
}

func (a avtCourseChapter) clone(db *gorm.DB) avtCourseChapter {
	a.avtCourseChapterDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a avtCourseChapter) replaceDB(db *gorm.DB) avtCourseChapter {
	a.avtCourseChapterDo.ReplaceDB(db)
	return a
}

type avtCourseChapterDo struct{ gen.DO }

type IAvtCourseChapterDo interface {
	gen.SubQuery
	Debug() IAvtCourseChapterDo
	WithContext(ctx context.Context) IAvtCourseChapterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAvtCourseChapterDo
	WriteDB() IAvtCourseChapterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAvtCourseChapterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAvtCourseChapterDo
	Not(conds ...gen.Condition) IAvtCourseChapterDo
	Or(conds ...gen.Condition) IAvtCourseChapterDo
	Select(conds ...field.Expr) IAvtCourseChapterDo
	Where(conds ...gen.Condition) IAvtCourseChapterDo
	Order(conds ...field.Expr) IAvtCourseChapterDo
	Distinct(cols ...field.Expr) IAvtCourseChapterDo
	Omit(cols ...field.Expr) IAvtCourseChapterDo
	Join(table schema.Tabler, on ...field.Expr) IAvtCourseChapterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAvtCourseChapterDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAvtCourseChapterDo
	Group(cols ...field.Expr) IAvtCourseChapterDo
	Having(conds ...gen.Condition) IAvtCourseChapterDo
	Limit(limit int) IAvtCourseChapterDo
	Offset(offset int) IAvtCourseChapterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtCourseChapterDo
	Unscoped() IAvtCourseChapterDo
	Create(values ...*model.AvtCourseChapter) error
	CreateInBatches(values []*model.AvtCourseChapter, batchSize int) error
	Save(values ...*model.AvtCourseChapter) error
	First() (*model.AvtCourseChapter, error)
	Take() (*model.AvtCourseChapter, error)
	Last() (*model.AvtCourseChapter, error)
	Find() ([]*model.AvtCourseChapter, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtCourseChapter, err error)
	FindInBatches(result *[]*model.AvtCourseChapter, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AvtCourseChapter) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAvtCourseChapterDo
	Assign(attrs ...field.AssignExpr) IAvtCourseChapterDo
	Joins(fields ...field.RelationField) IAvtCourseChapterDo
	Preload(fields ...field.RelationField) IAvtCourseChapterDo
	FirstOrInit() (*model.AvtCourseChapter, error)
	FirstOrCreate() (*model.AvtCourseChapter, error)
	FindByPage(offset int, limit int) (result []*model.AvtCourseChapter, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAvtCourseChapterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a avtCourseChapterDo) Debug() IAvtCourseChapterDo {
	return a.withDO(a.DO.Debug())
}

func (a avtCourseChapterDo) WithContext(ctx context.Context) IAvtCourseChapterDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a avtCourseChapterDo) ReadDB() IAvtCourseChapterDo {
	return a.Clauses(dbresolver.Read)
}

func (a avtCourseChapterDo) WriteDB() IAvtCourseChapterDo {
	return a.Clauses(dbresolver.Write)
}

func (a avtCourseChapterDo) Session(config *gorm.Session) IAvtCourseChapterDo {
	return a.withDO(a.DO.Session(config))
}

func (a avtCourseChapterDo) Clauses(conds ...clause.Expression) IAvtCourseChapterDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a avtCourseChapterDo) Returning(value interface{}, columns ...string) IAvtCourseChapterDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a avtCourseChapterDo) Not(conds ...gen.Condition) IAvtCourseChapterDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a avtCourseChapterDo) Or(conds ...gen.Condition) IAvtCourseChapterDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a avtCourseChapterDo) Select(conds ...field.Expr) IAvtCourseChapterDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a avtCourseChapterDo) Where(conds ...gen.Condition) IAvtCourseChapterDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a avtCourseChapterDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAvtCourseChapterDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a avtCourseChapterDo) Order(conds ...field.Expr) IAvtCourseChapterDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a avtCourseChapterDo) Distinct(cols ...field.Expr) IAvtCourseChapterDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a avtCourseChapterDo) Omit(cols ...field.Expr) IAvtCourseChapterDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a avtCourseChapterDo) Join(table schema.Tabler, on ...field.Expr) IAvtCourseChapterDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a avtCourseChapterDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAvtCourseChapterDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a avtCourseChapterDo) RightJoin(table schema.Tabler, on ...field.Expr) IAvtCourseChapterDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a avtCourseChapterDo) Group(cols ...field.Expr) IAvtCourseChapterDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a avtCourseChapterDo) Having(conds ...gen.Condition) IAvtCourseChapterDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a avtCourseChapterDo) Limit(limit int) IAvtCourseChapterDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a avtCourseChapterDo) Offset(offset int) IAvtCourseChapterDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a avtCourseChapterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtCourseChapterDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a avtCourseChapterDo) Unscoped() IAvtCourseChapterDo {
	return a.withDO(a.DO.Unscoped())
}

func (a avtCourseChapterDo) Create(values ...*model.AvtCourseChapter) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a avtCourseChapterDo) CreateInBatches(values []*model.AvtCourseChapter, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a avtCourseChapterDo) Save(values ...*model.AvtCourseChapter) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a avtCourseChapterDo) First() (*model.AvtCourseChapter, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtCourseChapter), nil
	}
}

func (a avtCourseChapterDo) Take() (*model.AvtCourseChapter, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtCourseChapter), nil
	}
}

func (a avtCourseChapterDo) Last() (*model.AvtCourseChapter, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtCourseChapter), nil
	}
}

func (a avtCourseChapterDo) Find() ([]*model.AvtCourseChapter, error) {
	result, err := a.DO.Find()
	return result.([]*model.AvtCourseChapter), err
}

func (a avtCourseChapterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtCourseChapter, err error) {
	buf := make([]*model.AvtCourseChapter, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a avtCourseChapterDo) FindInBatches(result *[]*model.AvtCourseChapter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a avtCourseChapterDo) Attrs(attrs ...field.AssignExpr) IAvtCourseChapterDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a avtCourseChapterDo) Assign(attrs ...field.AssignExpr) IAvtCourseChapterDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a avtCourseChapterDo) Joins(fields ...field.RelationField) IAvtCourseChapterDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a avtCourseChapterDo) Preload(fields ...field.RelationField) IAvtCourseChapterDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a avtCourseChapterDo) FirstOrInit() (*model.AvtCourseChapter, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtCourseChapter), nil
	}
}

func (a avtCourseChapterDo) FirstOrCreate() (*model.AvtCourseChapter, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtCourseChapter), nil
	}
}

func (a avtCourseChapterDo) FindByPage(offset int, limit int) (result []*model.AvtCourseChapter, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a avtCourseChapterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a avtCourseChapterDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a avtCourseChapterDo) Delete(models ...*model.AvtCourseChapter) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *avtCourseChapterDo) withDO(do gen.Dao) *avtCourseChapterDo {
	a.DO = *do.(*gen.DO)
	return a
}
