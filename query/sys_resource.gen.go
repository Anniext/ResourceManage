// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newSysResource(db *gorm.DB, opts ...gen.DOOption) sysResource {
	_sysResource := sysResource{}

	_sysResource.sysResourceDo.UseDB(db, opts...)
	_sysResource.sysResourceDo.UseModel(&model.SysResource{})

	tableName := _sysResource.sysResourceDo.TableName()
	_sysResource.ALL = field.NewAsterisk(tableName)
	_sysResource.ID = field.NewInt64(tableName, "id")
	_sysResource.Rtype = field.NewInt64(tableName, "rtype")
	_sysResource.Name = field.NewString(tableName, "name")
	_sysResource.ParentID = field.NewInt64(tableName, "parent_id")
	_sysResource.Seq = field.NewInt64(tableName, "seq")
	_sysResource.Icon = field.NewString(tableName, "icon")
	_sysResource.URLFor = field.NewString(tableName, "url_for")
	_sysResource.Description = field.NewString(tableName, "description")
	_sysResource.UserType = field.NewInt64(tableName, "user_type")
	_sysResource.Level = field.NewInt64(tableName, "level")
	_sysResource.Enable = field.NewInt64(tableName, "enable")
	_sysResource.Path = field.NewString(tableName, "path")
	_sysResource.FileName = field.NewString(tableName, "file_name")
	_sysResource.UncheckRight = field.NewInt64(tableName, "uncheck_right")

	_sysResource.fillFieldMap()

	return _sysResource
}

type sysResource struct {
	sysResourceDo

	ALL          field.Asterisk
	ID           field.Int64
	Rtype        field.Int64 // 类型：0-区域；1-菜单；2-按钮
	Name         field.String
	ParentID     field.Int64
	Seq          field.Int64
	Icon         field.String
	URLFor       field.String
	Description  field.String // 功能描述，
	UserType     field.Int64  //   0-平台管理员  1-代理 ； 2- 0,1，共有的
	Level        field.Int64
	Enable       field.Int64 // 0-不显示；1-显示
	Path         field.String
	FileName     field.String
	UncheckRight field.Int64 // 0-需要验证权限；1-不需要验证权限，并且不显示在管理，分配中

	fieldMap map[string]field.Expr
}

func (s sysResource) Table(newTableName string) *sysResource {
	s.sysResourceDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysResource) As(alias string) *sysResource {
	s.sysResourceDo.DO = *(s.sysResourceDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysResource) updateTableName(table string) *sysResource {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Rtype = field.NewInt64(table, "rtype")
	s.Name = field.NewString(table, "name")
	s.ParentID = field.NewInt64(table, "parent_id")
	s.Seq = field.NewInt64(table, "seq")
	s.Icon = field.NewString(table, "icon")
	s.URLFor = field.NewString(table, "url_for")
	s.Description = field.NewString(table, "description")
	s.UserType = field.NewInt64(table, "user_type")
	s.Level = field.NewInt64(table, "level")
	s.Enable = field.NewInt64(table, "enable")
	s.Path = field.NewString(table, "path")
	s.FileName = field.NewString(table, "file_name")
	s.UncheckRight = field.NewInt64(table, "uncheck_right")

	s.fillFieldMap()

	return s
}

func (s *sysResource) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysResource) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["id"] = s.ID
	s.fieldMap["rtype"] = s.Rtype
	s.fieldMap["name"] = s.Name
	s.fieldMap["parent_id"] = s.ParentID
	s.fieldMap["seq"] = s.Seq
	s.fieldMap["icon"] = s.Icon
	s.fieldMap["url_for"] = s.URLFor
	s.fieldMap["description"] = s.Description
	s.fieldMap["user_type"] = s.UserType
	s.fieldMap["level"] = s.Level
	s.fieldMap["enable"] = s.Enable
	s.fieldMap["path"] = s.Path
	s.fieldMap["file_name"] = s.FileName
	s.fieldMap["uncheck_right"] = s.UncheckRight
}

func (s sysResource) clone(db *gorm.DB) sysResource {
	s.sysResourceDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysResource) replaceDB(db *gorm.DB) sysResource {
	s.sysResourceDo.ReplaceDB(db)
	return s
}

type sysResourceDo struct{ gen.DO }

type ISysResourceDo interface {
	gen.SubQuery
	Debug() ISysResourceDo
	WithContext(ctx context.Context) ISysResourceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysResourceDo
	WriteDB() ISysResourceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysResourceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysResourceDo
	Not(conds ...gen.Condition) ISysResourceDo
	Or(conds ...gen.Condition) ISysResourceDo
	Select(conds ...field.Expr) ISysResourceDo
	Where(conds ...gen.Condition) ISysResourceDo
	Order(conds ...field.Expr) ISysResourceDo
	Distinct(cols ...field.Expr) ISysResourceDo
	Omit(cols ...field.Expr) ISysResourceDo
	Join(table schema.Tabler, on ...field.Expr) ISysResourceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysResourceDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysResourceDo
	Group(cols ...field.Expr) ISysResourceDo
	Having(conds ...gen.Condition) ISysResourceDo
	Limit(limit int) ISysResourceDo
	Offset(offset int) ISysResourceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysResourceDo
	Unscoped() ISysResourceDo
	Create(values ...*model.SysResource) error
	CreateInBatches(values []*model.SysResource, batchSize int) error
	Save(values ...*model.SysResource) error
	First() (*model.SysResource, error)
	Take() (*model.SysResource, error)
	Last() (*model.SysResource, error)
	Find() ([]*model.SysResource, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysResource, err error)
	FindInBatches(result *[]*model.SysResource, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysResource) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysResourceDo
	Assign(attrs ...field.AssignExpr) ISysResourceDo
	Joins(fields ...field.RelationField) ISysResourceDo
	Preload(fields ...field.RelationField) ISysResourceDo
	FirstOrInit() (*model.SysResource, error)
	FirstOrCreate() (*model.SysResource, error)
	FindByPage(offset int, limit int) (result []*model.SysResource, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysResourceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysResourceDo) Debug() ISysResourceDo {
	return s.withDO(s.DO.Debug())
}

func (s sysResourceDo) WithContext(ctx context.Context) ISysResourceDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysResourceDo) ReadDB() ISysResourceDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysResourceDo) WriteDB() ISysResourceDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysResourceDo) Session(config *gorm.Session) ISysResourceDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysResourceDo) Clauses(conds ...clause.Expression) ISysResourceDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysResourceDo) Returning(value interface{}, columns ...string) ISysResourceDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysResourceDo) Not(conds ...gen.Condition) ISysResourceDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysResourceDo) Or(conds ...gen.Condition) ISysResourceDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysResourceDo) Select(conds ...field.Expr) ISysResourceDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysResourceDo) Where(conds ...gen.Condition) ISysResourceDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysResourceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysResourceDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysResourceDo) Order(conds ...field.Expr) ISysResourceDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysResourceDo) Distinct(cols ...field.Expr) ISysResourceDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysResourceDo) Omit(cols ...field.Expr) ISysResourceDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysResourceDo) Join(table schema.Tabler, on ...field.Expr) ISysResourceDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysResourceDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysResourceDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysResourceDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysResourceDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysResourceDo) Group(cols ...field.Expr) ISysResourceDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysResourceDo) Having(conds ...gen.Condition) ISysResourceDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysResourceDo) Limit(limit int) ISysResourceDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysResourceDo) Offset(offset int) ISysResourceDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysResourceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysResourceDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysResourceDo) Unscoped() ISysResourceDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysResourceDo) Create(values ...*model.SysResource) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysResourceDo) CreateInBatches(values []*model.SysResource, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysResourceDo) Save(values ...*model.SysResource) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysResourceDo) First() (*model.SysResource, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysResource), nil
	}
}

func (s sysResourceDo) Take() (*model.SysResource, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysResource), nil
	}
}

func (s sysResourceDo) Last() (*model.SysResource, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysResource), nil
	}
}

func (s sysResourceDo) Find() ([]*model.SysResource, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysResource), err
}

func (s sysResourceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysResource, err error) {
	buf := make([]*model.SysResource, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysResourceDo) FindInBatches(result *[]*model.SysResource, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysResourceDo) Attrs(attrs ...field.AssignExpr) ISysResourceDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysResourceDo) Assign(attrs ...field.AssignExpr) ISysResourceDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysResourceDo) Joins(fields ...field.RelationField) ISysResourceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysResourceDo) Preload(fields ...field.RelationField) ISysResourceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysResourceDo) FirstOrInit() (*model.SysResource, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysResource), nil
	}
}

func (s sysResourceDo) FirstOrCreate() (*model.SysResource, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysResource), nil
	}
}

func (s sysResourceDo) FindByPage(offset int, limit int) (result []*model.SysResource, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysResourceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysResourceDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysResourceDo) Delete(models ...*model.SysResource) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysResourceDo) withDO(do gen.Dao) *sysResourceDo {
	s.DO = *do.(*gen.DO)
	return s
}
