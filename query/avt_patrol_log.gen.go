// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newAvtPatrolLog(db *gorm.DB, opts ...gen.DOOption) avtPatrolLog {
	_avtPatrolLog := avtPatrolLog{}

	_avtPatrolLog.avtPatrolLogDo.UseDB(db, opts...)
	_avtPatrolLog.avtPatrolLogDo.UseModel(&model.AvtPatrolLog{})

	tableName := _avtPatrolLog.avtPatrolLogDo.TableName()
	_avtPatrolLog.ALL = field.NewAsterisk(tableName)
	_avtPatrolLog.ID = field.NewInt64(tableName, "id")
	_avtPatrolLog.CreateTime = field.NewTime(tableName, "create_time")
	_avtPatrolLog.Status = field.NewInt64(tableName, "status")
	_avtPatrolLog.Campus = field.NewString(tableName, "campus")
	_avtPatrolLog.Building = field.NewString(tableName, "building")
	_avtPatrolLog.Floor = field.NewString(tableName, "floor")
	_avtPatrolLog.Room = field.NewString(tableName, "room")
	_avtPatrolLog.Model = field.NewString(tableName, "model")
	_avtPatrolLog.Position = field.NewString(tableName, "position")
	_avtPatrolLog.IP = field.NewString(tableName, "ip")

	_avtPatrolLog.fillFieldMap()

	return _avtPatrolLog
}

type avtPatrolLog struct {
	avtPatrolLogDo

	ALL        field.Asterisk
	ID         field.Int64
	CreateTime field.Time   // 巡检时间
	Status     field.Int64  // 0-正常；1-异常
	Campus     field.String // 校区
	Building   field.String // 大楼
	Floor      field.String // 楼层
	Room       field.String // 教室
	Model      field.String // 设备型号
	Position   field.String // 安装位置
	IP         field.String // IP地址

	fieldMap map[string]field.Expr
}

func (a avtPatrolLog) Table(newTableName string) *avtPatrolLog {
	a.avtPatrolLogDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a avtPatrolLog) As(alias string) *avtPatrolLog {
	a.avtPatrolLogDo.DO = *(a.avtPatrolLogDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *avtPatrolLog) updateTableName(table string) *avtPatrolLog {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.CreateTime = field.NewTime(table, "create_time")
	a.Status = field.NewInt64(table, "status")
	a.Campus = field.NewString(table, "campus")
	a.Building = field.NewString(table, "building")
	a.Floor = field.NewString(table, "floor")
	a.Room = field.NewString(table, "room")
	a.Model = field.NewString(table, "model")
	a.Position = field.NewString(table, "position")
	a.IP = field.NewString(table, "ip")

	a.fillFieldMap()

	return a
}

func (a *avtPatrolLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *avtPatrolLog) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id"] = a.ID
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["status"] = a.Status
	a.fieldMap["campus"] = a.Campus
	a.fieldMap["building"] = a.Building
	a.fieldMap["floor"] = a.Floor
	a.fieldMap["room"] = a.Room
	a.fieldMap["model"] = a.Model
	a.fieldMap["position"] = a.Position
	a.fieldMap["ip"] = a.IP
}

func (a avtPatrolLog) clone(db *gorm.DB) avtPatrolLog {
	a.avtPatrolLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a avtPatrolLog) replaceDB(db *gorm.DB) avtPatrolLog {
	a.avtPatrolLogDo.ReplaceDB(db)
	return a
}

type avtPatrolLogDo struct{ gen.DO }

type IAvtPatrolLogDo interface {
	gen.SubQuery
	Debug() IAvtPatrolLogDo
	WithContext(ctx context.Context) IAvtPatrolLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAvtPatrolLogDo
	WriteDB() IAvtPatrolLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAvtPatrolLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAvtPatrolLogDo
	Not(conds ...gen.Condition) IAvtPatrolLogDo
	Or(conds ...gen.Condition) IAvtPatrolLogDo
	Select(conds ...field.Expr) IAvtPatrolLogDo
	Where(conds ...gen.Condition) IAvtPatrolLogDo
	Order(conds ...field.Expr) IAvtPatrolLogDo
	Distinct(cols ...field.Expr) IAvtPatrolLogDo
	Omit(cols ...field.Expr) IAvtPatrolLogDo
	Join(table schema.Tabler, on ...field.Expr) IAvtPatrolLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAvtPatrolLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAvtPatrolLogDo
	Group(cols ...field.Expr) IAvtPatrolLogDo
	Having(conds ...gen.Condition) IAvtPatrolLogDo
	Limit(limit int) IAvtPatrolLogDo
	Offset(offset int) IAvtPatrolLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtPatrolLogDo
	Unscoped() IAvtPatrolLogDo
	Create(values ...*model.AvtPatrolLog) error
	CreateInBatches(values []*model.AvtPatrolLog, batchSize int) error
	Save(values ...*model.AvtPatrolLog) error
	First() (*model.AvtPatrolLog, error)
	Take() (*model.AvtPatrolLog, error)
	Last() (*model.AvtPatrolLog, error)
	Find() ([]*model.AvtPatrolLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtPatrolLog, err error)
	FindInBatches(result *[]*model.AvtPatrolLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AvtPatrolLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAvtPatrolLogDo
	Assign(attrs ...field.AssignExpr) IAvtPatrolLogDo
	Joins(fields ...field.RelationField) IAvtPatrolLogDo
	Preload(fields ...field.RelationField) IAvtPatrolLogDo
	FirstOrInit() (*model.AvtPatrolLog, error)
	FirstOrCreate() (*model.AvtPatrolLog, error)
	FindByPage(offset int, limit int) (result []*model.AvtPatrolLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAvtPatrolLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a avtPatrolLogDo) Debug() IAvtPatrolLogDo {
	return a.withDO(a.DO.Debug())
}

func (a avtPatrolLogDo) WithContext(ctx context.Context) IAvtPatrolLogDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a avtPatrolLogDo) ReadDB() IAvtPatrolLogDo {
	return a.Clauses(dbresolver.Read)
}

func (a avtPatrolLogDo) WriteDB() IAvtPatrolLogDo {
	return a.Clauses(dbresolver.Write)
}

func (a avtPatrolLogDo) Session(config *gorm.Session) IAvtPatrolLogDo {
	return a.withDO(a.DO.Session(config))
}

func (a avtPatrolLogDo) Clauses(conds ...clause.Expression) IAvtPatrolLogDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a avtPatrolLogDo) Returning(value interface{}, columns ...string) IAvtPatrolLogDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a avtPatrolLogDo) Not(conds ...gen.Condition) IAvtPatrolLogDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a avtPatrolLogDo) Or(conds ...gen.Condition) IAvtPatrolLogDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a avtPatrolLogDo) Select(conds ...field.Expr) IAvtPatrolLogDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a avtPatrolLogDo) Where(conds ...gen.Condition) IAvtPatrolLogDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a avtPatrolLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAvtPatrolLogDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a avtPatrolLogDo) Order(conds ...field.Expr) IAvtPatrolLogDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a avtPatrolLogDo) Distinct(cols ...field.Expr) IAvtPatrolLogDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a avtPatrolLogDo) Omit(cols ...field.Expr) IAvtPatrolLogDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a avtPatrolLogDo) Join(table schema.Tabler, on ...field.Expr) IAvtPatrolLogDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a avtPatrolLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAvtPatrolLogDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a avtPatrolLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IAvtPatrolLogDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a avtPatrolLogDo) Group(cols ...field.Expr) IAvtPatrolLogDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a avtPatrolLogDo) Having(conds ...gen.Condition) IAvtPatrolLogDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a avtPatrolLogDo) Limit(limit int) IAvtPatrolLogDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a avtPatrolLogDo) Offset(offset int) IAvtPatrolLogDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a avtPatrolLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtPatrolLogDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a avtPatrolLogDo) Unscoped() IAvtPatrolLogDo {
	return a.withDO(a.DO.Unscoped())
}

func (a avtPatrolLogDo) Create(values ...*model.AvtPatrolLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a avtPatrolLogDo) CreateInBatches(values []*model.AvtPatrolLog, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a avtPatrolLogDo) Save(values ...*model.AvtPatrolLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a avtPatrolLogDo) First() (*model.AvtPatrolLog, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtPatrolLog), nil
	}
}

func (a avtPatrolLogDo) Take() (*model.AvtPatrolLog, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtPatrolLog), nil
	}
}

func (a avtPatrolLogDo) Last() (*model.AvtPatrolLog, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtPatrolLog), nil
	}
}

func (a avtPatrolLogDo) Find() ([]*model.AvtPatrolLog, error) {
	result, err := a.DO.Find()
	return result.([]*model.AvtPatrolLog), err
}

func (a avtPatrolLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtPatrolLog, err error) {
	buf := make([]*model.AvtPatrolLog, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a avtPatrolLogDo) FindInBatches(result *[]*model.AvtPatrolLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a avtPatrolLogDo) Attrs(attrs ...field.AssignExpr) IAvtPatrolLogDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a avtPatrolLogDo) Assign(attrs ...field.AssignExpr) IAvtPatrolLogDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a avtPatrolLogDo) Joins(fields ...field.RelationField) IAvtPatrolLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a avtPatrolLogDo) Preload(fields ...field.RelationField) IAvtPatrolLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a avtPatrolLogDo) FirstOrInit() (*model.AvtPatrolLog, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtPatrolLog), nil
	}
}

func (a avtPatrolLogDo) FirstOrCreate() (*model.AvtPatrolLog, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtPatrolLog), nil
	}
}

func (a avtPatrolLogDo) FindByPage(offset int, limit int) (result []*model.AvtPatrolLog, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a avtPatrolLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a avtPatrolLogDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a avtPatrolLogDo) Delete(models ...*model.AvtPatrolLog) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *avtPatrolLogDo) withDO(do gen.Dao) *avtPatrolLogDo {
	a.DO = *do.(*gen.DO)
	return a
}
