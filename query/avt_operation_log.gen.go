// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newAvtOperationLog(db *gorm.DB, opts ...gen.DOOption) avtOperationLog {
	_avtOperationLog := avtOperationLog{}

	_avtOperationLog.avtOperationLogDo.UseDB(db, opts...)
	_avtOperationLog.avtOperationLogDo.UseModel(&model.AvtOperationLog{})

	tableName := _avtOperationLog.avtOperationLogDo.TableName()
	_avtOperationLog.ALL = field.NewAsterisk(tableName)
	_avtOperationLog.ID = field.NewInt64(tableName, "id")
	_avtOperationLog.UserID = field.NewInt64(tableName, "user_id")
	_avtOperationLog.ActionType = field.NewInt64(tableName, "action_type")
	_avtOperationLog.Content = field.NewString(tableName, "content")
	_avtOperationLog.IP = field.NewString(tableName, "ip")
	_avtOperationLog.CreateTime = field.NewTime(tableName, "create_time")
	_avtOperationLog.UpdateTime = field.NewTime(tableName, "update_time")

	_avtOperationLog.fillFieldMap()

	return _avtOperationLog
}

type avtOperationLog struct {
	avtOperationLogDo

	ALL        field.Asterisk
	ID         field.Int64
	UserID     field.Int64
	ActionType field.Int64 // 1-控制；2-升级程序
	Content    field.String
	IP         field.String
	CreateTime field.Time
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (a avtOperationLog) Table(newTableName string) *avtOperationLog {
	a.avtOperationLogDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a avtOperationLog) As(alias string) *avtOperationLog {
	a.avtOperationLogDo.DO = *(a.avtOperationLogDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *avtOperationLog) updateTableName(table string) *avtOperationLog {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.UserID = field.NewInt64(table, "user_id")
	a.ActionType = field.NewInt64(table, "action_type")
	a.Content = field.NewString(table, "content")
	a.IP = field.NewString(table, "ip")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")

	a.fillFieldMap()

	return a
}

func (a *avtOperationLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *avtOperationLog) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["action_type"] = a.ActionType
	a.fieldMap["content"] = a.Content
	a.fieldMap["ip"] = a.IP
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
}

func (a avtOperationLog) clone(db *gorm.DB) avtOperationLog {
	a.avtOperationLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a avtOperationLog) replaceDB(db *gorm.DB) avtOperationLog {
	a.avtOperationLogDo.ReplaceDB(db)
	return a
}

type avtOperationLogDo struct{ gen.DO }

type IAvtOperationLogDo interface {
	gen.SubQuery
	Debug() IAvtOperationLogDo
	WithContext(ctx context.Context) IAvtOperationLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAvtOperationLogDo
	WriteDB() IAvtOperationLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAvtOperationLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAvtOperationLogDo
	Not(conds ...gen.Condition) IAvtOperationLogDo
	Or(conds ...gen.Condition) IAvtOperationLogDo
	Select(conds ...field.Expr) IAvtOperationLogDo
	Where(conds ...gen.Condition) IAvtOperationLogDo
	Order(conds ...field.Expr) IAvtOperationLogDo
	Distinct(cols ...field.Expr) IAvtOperationLogDo
	Omit(cols ...field.Expr) IAvtOperationLogDo
	Join(table schema.Tabler, on ...field.Expr) IAvtOperationLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAvtOperationLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAvtOperationLogDo
	Group(cols ...field.Expr) IAvtOperationLogDo
	Having(conds ...gen.Condition) IAvtOperationLogDo
	Limit(limit int) IAvtOperationLogDo
	Offset(offset int) IAvtOperationLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtOperationLogDo
	Unscoped() IAvtOperationLogDo
	Create(values ...*model.AvtOperationLog) error
	CreateInBatches(values []*model.AvtOperationLog, batchSize int) error
	Save(values ...*model.AvtOperationLog) error
	First() (*model.AvtOperationLog, error)
	Take() (*model.AvtOperationLog, error)
	Last() (*model.AvtOperationLog, error)
	Find() ([]*model.AvtOperationLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtOperationLog, err error)
	FindInBatches(result *[]*model.AvtOperationLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AvtOperationLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAvtOperationLogDo
	Assign(attrs ...field.AssignExpr) IAvtOperationLogDo
	Joins(fields ...field.RelationField) IAvtOperationLogDo
	Preload(fields ...field.RelationField) IAvtOperationLogDo
	FirstOrInit() (*model.AvtOperationLog, error)
	FirstOrCreate() (*model.AvtOperationLog, error)
	FindByPage(offset int, limit int) (result []*model.AvtOperationLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAvtOperationLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a avtOperationLogDo) Debug() IAvtOperationLogDo {
	return a.withDO(a.DO.Debug())
}

func (a avtOperationLogDo) WithContext(ctx context.Context) IAvtOperationLogDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a avtOperationLogDo) ReadDB() IAvtOperationLogDo {
	return a.Clauses(dbresolver.Read)
}

func (a avtOperationLogDo) WriteDB() IAvtOperationLogDo {
	return a.Clauses(dbresolver.Write)
}

func (a avtOperationLogDo) Session(config *gorm.Session) IAvtOperationLogDo {
	return a.withDO(a.DO.Session(config))
}

func (a avtOperationLogDo) Clauses(conds ...clause.Expression) IAvtOperationLogDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a avtOperationLogDo) Returning(value interface{}, columns ...string) IAvtOperationLogDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a avtOperationLogDo) Not(conds ...gen.Condition) IAvtOperationLogDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a avtOperationLogDo) Or(conds ...gen.Condition) IAvtOperationLogDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a avtOperationLogDo) Select(conds ...field.Expr) IAvtOperationLogDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a avtOperationLogDo) Where(conds ...gen.Condition) IAvtOperationLogDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a avtOperationLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAvtOperationLogDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a avtOperationLogDo) Order(conds ...field.Expr) IAvtOperationLogDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a avtOperationLogDo) Distinct(cols ...field.Expr) IAvtOperationLogDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a avtOperationLogDo) Omit(cols ...field.Expr) IAvtOperationLogDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a avtOperationLogDo) Join(table schema.Tabler, on ...field.Expr) IAvtOperationLogDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a avtOperationLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAvtOperationLogDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a avtOperationLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IAvtOperationLogDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a avtOperationLogDo) Group(cols ...field.Expr) IAvtOperationLogDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a avtOperationLogDo) Having(conds ...gen.Condition) IAvtOperationLogDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a avtOperationLogDo) Limit(limit int) IAvtOperationLogDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a avtOperationLogDo) Offset(offset int) IAvtOperationLogDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a avtOperationLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtOperationLogDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a avtOperationLogDo) Unscoped() IAvtOperationLogDo {
	return a.withDO(a.DO.Unscoped())
}

func (a avtOperationLogDo) Create(values ...*model.AvtOperationLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a avtOperationLogDo) CreateInBatches(values []*model.AvtOperationLog, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a avtOperationLogDo) Save(values ...*model.AvtOperationLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a avtOperationLogDo) First() (*model.AvtOperationLog, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtOperationLog), nil
	}
}

func (a avtOperationLogDo) Take() (*model.AvtOperationLog, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtOperationLog), nil
	}
}

func (a avtOperationLogDo) Last() (*model.AvtOperationLog, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtOperationLog), nil
	}
}

func (a avtOperationLogDo) Find() ([]*model.AvtOperationLog, error) {
	result, err := a.DO.Find()
	return result.([]*model.AvtOperationLog), err
}

func (a avtOperationLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtOperationLog, err error) {
	buf := make([]*model.AvtOperationLog, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a avtOperationLogDo) FindInBatches(result *[]*model.AvtOperationLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a avtOperationLogDo) Attrs(attrs ...field.AssignExpr) IAvtOperationLogDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a avtOperationLogDo) Assign(attrs ...field.AssignExpr) IAvtOperationLogDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a avtOperationLogDo) Joins(fields ...field.RelationField) IAvtOperationLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a avtOperationLogDo) Preload(fields ...field.RelationField) IAvtOperationLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a avtOperationLogDo) FirstOrInit() (*model.AvtOperationLog, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtOperationLog), nil
	}
}

func (a avtOperationLogDo) FirstOrCreate() (*model.AvtOperationLog, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtOperationLog), nil
	}
}

func (a avtOperationLogDo) FindByPage(offset int, limit int) (result []*model.AvtOperationLog, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a avtOperationLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a avtOperationLogDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a avtOperationLogDo) Delete(models ...*model.AvtOperationLog) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *avtOperationLogDo) withDO(do gen.Dao) *avtOperationLogDo {
	a.DO = *do.(*gen.DO)
	return a
}
