// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newSysVal(db *gorm.DB, opts ...gen.DOOption) sysVal {
	_sysVal := sysVal{}

	_sysVal.sysValDo.UseDB(db, opts...)
	_sysVal.sysValDo.UseModel(&model.SysVal{})

	tableName := _sysVal.sysValDo.TableName()
	_sysVal.ALL = field.NewAsterisk(tableName)
	_sysVal.ID = field.NewInt64(tableName, "id")
	_sysVal.Code = field.NewString(tableName, "code")
	_sysVal.Desc = field.NewString(tableName, "desc")
	_sysVal.Value = field.NewString(tableName, "value")
	_sysVal.Uplimit = field.NewString(tableName, "uplimit")
	_sysVal.Step = field.NewString(tableName, "step")
	_sysVal.Tag = field.NewInt64(tableName, "tag")
	_sysVal.Createuser = field.NewString(tableName, "createuser")
	_sysVal.Createdate = field.NewTime(tableName, "createdate")
	_sysVal.Changeuser = field.NewString(tableName, "changeuser")
	_sysVal.Changedate = field.NewTime(tableName, "changedate")

	_sysVal.fillFieldMap()

	return _sysVal
}

type sysVal struct {
	sysValDo

	ALL        field.Asterisk
	ID         field.Int64  // 序号
	Code       field.String // 代码
	Desc       field.String // 描述
	Value      field.String // 变量
	Uplimit    field.String // 上限
	Step       field.String // 步长
	Tag        field.Int64  // 状态:0.正常1.删除
	Createuser field.String // 创建人
	Createdate field.Time   // 创建时间
	Changeuser field.String // 修改人
	Changedate field.Time   // 修改时间

	fieldMap map[string]field.Expr
}

func (s sysVal) Table(newTableName string) *sysVal {
	s.sysValDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysVal) As(alias string) *sysVal {
	s.sysValDo.DO = *(s.sysValDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysVal) updateTableName(table string) *sysVal {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Code = field.NewString(table, "code")
	s.Desc = field.NewString(table, "desc")
	s.Value = field.NewString(table, "value")
	s.Uplimit = field.NewString(table, "uplimit")
	s.Step = field.NewString(table, "step")
	s.Tag = field.NewInt64(table, "tag")
	s.Createuser = field.NewString(table, "createuser")
	s.Createdate = field.NewTime(table, "createdate")
	s.Changeuser = field.NewString(table, "changeuser")
	s.Changedate = field.NewTime(table, "changedate")

	s.fillFieldMap()

	return s
}

func (s *sysVal) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysVal) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["code"] = s.Code
	s.fieldMap["desc"] = s.Desc
	s.fieldMap["value"] = s.Value
	s.fieldMap["uplimit"] = s.Uplimit
	s.fieldMap["step"] = s.Step
	s.fieldMap["tag"] = s.Tag
	s.fieldMap["createuser"] = s.Createuser
	s.fieldMap["createdate"] = s.Createdate
	s.fieldMap["changeuser"] = s.Changeuser
	s.fieldMap["changedate"] = s.Changedate
}

func (s sysVal) clone(db *gorm.DB) sysVal {
	s.sysValDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysVal) replaceDB(db *gorm.DB) sysVal {
	s.sysValDo.ReplaceDB(db)
	return s
}

type sysValDo struct{ gen.DO }

type ISysValDo interface {
	gen.SubQuery
	Debug() ISysValDo
	WithContext(ctx context.Context) ISysValDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysValDo
	WriteDB() ISysValDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysValDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysValDo
	Not(conds ...gen.Condition) ISysValDo
	Or(conds ...gen.Condition) ISysValDo
	Select(conds ...field.Expr) ISysValDo
	Where(conds ...gen.Condition) ISysValDo
	Order(conds ...field.Expr) ISysValDo
	Distinct(cols ...field.Expr) ISysValDo
	Omit(cols ...field.Expr) ISysValDo
	Join(table schema.Tabler, on ...field.Expr) ISysValDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysValDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysValDo
	Group(cols ...field.Expr) ISysValDo
	Having(conds ...gen.Condition) ISysValDo
	Limit(limit int) ISysValDo
	Offset(offset int) ISysValDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysValDo
	Unscoped() ISysValDo
	Create(values ...*model.SysVal) error
	CreateInBatches(values []*model.SysVal, batchSize int) error
	Save(values ...*model.SysVal) error
	First() (*model.SysVal, error)
	Take() (*model.SysVal, error)
	Last() (*model.SysVal, error)
	Find() ([]*model.SysVal, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysVal, err error)
	FindInBatches(result *[]*model.SysVal, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysVal) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysValDo
	Assign(attrs ...field.AssignExpr) ISysValDo
	Joins(fields ...field.RelationField) ISysValDo
	Preload(fields ...field.RelationField) ISysValDo
	FirstOrInit() (*model.SysVal, error)
	FirstOrCreate() (*model.SysVal, error)
	FindByPage(offset int, limit int) (result []*model.SysVal, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysValDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysValDo) Debug() ISysValDo {
	return s.withDO(s.DO.Debug())
}

func (s sysValDo) WithContext(ctx context.Context) ISysValDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysValDo) ReadDB() ISysValDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysValDo) WriteDB() ISysValDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysValDo) Session(config *gorm.Session) ISysValDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysValDo) Clauses(conds ...clause.Expression) ISysValDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysValDo) Returning(value interface{}, columns ...string) ISysValDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysValDo) Not(conds ...gen.Condition) ISysValDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysValDo) Or(conds ...gen.Condition) ISysValDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysValDo) Select(conds ...field.Expr) ISysValDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysValDo) Where(conds ...gen.Condition) ISysValDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysValDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysValDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysValDo) Order(conds ...field.Expr) ISysValDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysValDo) Distinct(cols ...field.Expr) ISysValDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysValDo) Omit(cols ...field.Expr) ISysValDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysValDo) Join(table schema.Tabler, on ...field.Expr) ISysValDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysValDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysValDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysValDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysValDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysValDo) Group(cols ...field.Expr) ISysValDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysValDo) Having(conds ...gen.Condition) ISysValDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysValDo) Limit(limit int) ISysValDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysValDo) Offset(offset int) ISysValDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysValDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysValDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysValDo) Unscoped() ISysValDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysValDo) Create(values ...*model.SysVal) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysValDo) CreateInBatches(values []*model.SysVal, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysValDo) Save(values ...*model.SysVal) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysValDo) First() (*model.SysVal, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysVal), nil
	}
}

func (s sysValDo) Take() (*model.SysVal, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysVal), nil
	}
}

func (s sysValDo) Last() (*model.SysVal, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysVal), nil
	}
}

func (s sysValDo) Find() ([]*model.SysVal, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysVal), err
}

func (s sysValDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysVal, err error) {
	buf := make([]*model.SysVal, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysValDo) FindInBatches(result *[]*model.SysVal, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysValDo) Attrs(attrs ...field.AssignExpr) ISysValDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysValDo) Assign(attrs ...field.AssignExpr) ISysValDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysValDo) Joins(fields ...field.RelationField) ISysValDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysValDo) Preload(fields ...field.RelationField) ISysValDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysValDo) FirstOrInit() (*model.SysVal, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysVal), nil
	}
}

func (s sysValDo) FirstOrCreate() (*model.SysVal, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysVal), nil
	}
}

func (s sysValDo) FindByPage(offset int, limit int) (result []*model.SysVal, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysValDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysValDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysValDo) Delete(models ...*model.SysVal) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysValDo) withDO(do gen.Dao) *sysValDo {
	s.DO = *do.(*gen.DO)
	return s
}
