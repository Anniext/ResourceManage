// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newSysLogintrace(db *gorm.DB, opts ...gen.DOOption) sysLogintrace {
	_sysLogintrace := sysLogintrace{}

	_sysLogintrace.sysLogintraceDo.UseDB(db, opts...)
	_sysLogintrace.sysLogintraceDo.UseModel(&model.SysLogintrace{})

	tableName := _sysLogintrace.sysLogintraceDo.TableName()
	_sysLogintrace.ALL = field.NewAsterisk(tableName)
	_sysLogintrace.ID = field.NewInt64(tableName, "id")
	_sysLogintrace.User = field.NewString(tableName, "user")
	_sysLogintrace.RemoteAddr = field.NewString(tableName, "remoteAddr")
	_sysLogintrace.LoginTime = field.NewTime(tableName, "loginTime")

	_sysLogintrace.fillFieldMap()

	return _sysLogintrace
}

type sysLogintrace struct {
	sysLogintraceDo

	ALL        field.Asterisk
	ID         field.Int64  // 序号
	User       field.String // 用户名
	RemoteAddr field.String // IP地址
	LoginTime  field.Time   // 登录时间

	fieldMap map[string]field.Expr
}

func (s sysLogintrace) Table(newTableName string) *sysLogintrace {
	s.sysLogintraceDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysLogintrace) As(alias string) *sysLogintrace {
	s.sysLogintraceDo.DO = *(s.sysLogintraceDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysLogintrace) updateTableName(table string) *sysLogintrace {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.User = field.NewString(table, "user")
	s.RemoteAddr = field.NewString(table, "remoteAddr")
	s.LoginTime = field.NewTime(table, "loginTime")

	s.fillFieldMap()

	return s
}

func (s *sysLogintrace) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysLogintrace) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user"] = s.User
	s.fieldMap["remoteAddr"] = s.RemoteAddr
	s.fieldMap["loginTime"] = s.LoginTime
}

func (s sysLogintrace) clone(db *gorm.DB) sysLogintrace {
	s.sysLogintraceDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysLogintrace) replaceDB(db *gorm.DB) sysLogintrace {
	s.sysLogintraceDo.ReplaceDB(db)
	return s
}

type sysLogintraceDo struct{ gen.DO }

type ISysLogintraceDo interface {
	gen.SubQuery
	Debug() ISysLogintraceDo
	WithContext(ctx context.Context) ISysLogintraceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysLogintraceDo
	WriteDB() ISysLogintraceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysLogintraceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysLogintraceDo
	Not(conds ...gen.Condition) ISysLogintraceDo
	Or(conds ...gen.Condition) ISysLogintraceDo
	Select(conds ...field.Expr) ISysLogintraceDo
	Where(conds ...gen.Condition) ISysLogintraceDo
	Order(conds ...field.Expr) ISysLogintraceDo
	Distinct(cols ...field.Expr) ISysLogintraceDo
	Omit(cols ...field.Expr) ISysLogintraceDo
	Join(table schema.Tabler, on ...field.Expr) ISysLogintraceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysLogintraceDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysLogintraceDo
	Group(cols ...field.Expr) ISysLogintraceDo
	Having(conds ...gen.Condition) ISysLogintraceDo
	Limit(limit int) ISysLogintraceDo
	Offset(offset int) ISysLogintraceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysLogintraceDo
	Unscoped() ISysLogintraceDo
	Create(values ...*model.SysLogintrace) error
	CreateInBatches(values []*model.SysLogintrace, batchSize int) error
	Save(values ...*model.SysLogintrace) error
	First() (*model.SysLogintrace, error)
	Take() (*model.SysLogintrace, error)
	Last() (*model.SysLogintrace, error)
	Find() ([]*model.SysLogintrace, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysLogintrace, err error)
	FindInBatches(result *[]*model.SysLogintrace, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysLogintrace) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysLogintraceDo
	Assign(attrs ...field.AssignExpr) ISysLogintraceDo
	Joins(fields ...field.RelationField) ISysLogintraceDo
	Preload(fields ...field.RelationField) ISysLogintraceDo
	FirstOrInit() (*model.SysLogintrace, error)
	FirstOrCreate() (*model.SysLogintrace, error)
	FindByPage(offset int, limit int) (result []*model.SysLogintrace, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysLogintraceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysLogintraceDo) Debug() ISysLogintraceDo {
	return s.withDO(s.DO.Debug())
}

func (s sysLogintraceDo) WithContext(ctx context.Context) ISysLogintraceDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysLogintraceDo) ReadDB() ISysLogintraceDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysLogintraceDo) WriteDB() ISysLogintraceDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysLogintraceDo) Session(config *gorm.Session) ISysLogintraceDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysLogintraceDo) Clauses(conds ...clause.Expression) ISysLogintraceDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysLogintraceDo) Returning(value interface{}, columns ...string) ISysLogintraceDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysLogintraceDo) Not(conds ...gen.Condition) ISysLogintraceDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysLogintraceDo) Or(conds ...gen.Condition) ISysLogintraceDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysLogintraceDo) Select(conds ...field.Expr) ISysLogintraceDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysLogintraceDo) Where(conds ...gen.Condition) ISysLogintraceDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysLogintraceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysLogintraceDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysLogintraceDo) Order(conds ...field.Expr) ISysLogintraceDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysLogintraceDo) Distinct(cols ...field.Expr) ISysLogintraceDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysLogintraceDo) Omit(cols ...field.Expr) ISysLogintraceDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysLogintraceDo) Join(table schema.Tabler, on ...field.Expr) ISysLogintraceDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysLogintraceDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysLogintraceDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysLogintraceDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysLogintraceDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysLogintraceDo) Group(cols ...field.Expr) ISysLogintraceDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysLogintraceDo) Having(conds ...gen.Condition) ISysLogintraceDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysLogintraceDo) Limit(limit int) ISysLogintraceDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysLogintraceDo) Offset(offset int) ISysLogintraceDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysLogintraceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysLogintraceDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysLogintraceDo) Unscoped() ISysLogintraceDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysLogintraceDo) Create(values ...*model.SysLogintrace) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysLogintraceDo) CreateInBatches(values []*model.SysLogintrace, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysLogintraceDo) Save(values ...*model.SysLogintrace) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysLogintraceDo) First() (*model.SysLogintrace, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysLogintrace), nil
	}
}

func (s sysLogintraceDo) Take() (*model.SysLogintrace, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysLogintrace), nil
	}
}

func (s sysLogintraceDo) Last() (*model.SysLogintrace, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysLogintrace), nil
	}
}

func (s sysLogintraceDo) Find() ([]*model.SysLogintrace, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysLogintrace), err
}

func (s sysLogintraceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysLogintrace, err error) {
	buf := make([]*model.SysLogintrace, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysLogintraceDo) FindInBatches(result *[]*model.SysLogintrace, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysLogintraceDo) Attrs(attrs ...field.AssignExpr) ISysLogintraceDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysLogintraceDo) Assign(attrs ...field.AssignExpr) ISysLogintraceDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysLogintraceDo) Joins(fields ...field.RelationField) ISysLogintraceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysLogintraceDo) Preload(fields ...field.RelationField) ISysLogintraceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysLogintraceDo) FirstOrInit() (*model.SysLogintrace, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysLogintrace), nil
	}
}

func (s sysLogintraceDo) FirstOrCreate() (*model.SysLogintrace, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysLogintrace), nil
	}
}

func (s sysLogintraceDo) FindByPage(offset int, limit int) (result []*model.SysLogintrace, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysLogintraceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysLogintraceDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysLogintraceDo) Delete(models ...*model.SysLogintrace) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysLogintraceDo) withDO(do gen.Dao) *sysLogintraceDo {
	s.DO = *do.(*gen.DO)
	return s
}
