// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newAvtOneCard(db *gorm.DB, opts ...gen.DOOption) avtOneCard {
	_avtOneCard := avtOneCard{}

	_avtOneCard.avtOneCardDo.UseDB(db, opts...)
	_avtOneCard.avtOneCardDo.UseModel(&model.AvtOneCard{})

	tableName := _avtOneCard.avtOneCardDo.TableName()
	_avtOneCard.ALL = field.NewAsterisk(tableName)
	_avtOneCard.ID = field.NewInt64(tableName, "id")
	_avtOneCard.CardNo = field.NewString(tableName, "card_no")
	_avtOneCard.Name = field.NewString(tableName, "name")
	_avtOneCard.College = field.NewString(tableName, "college")
	_avtOneCard.Status = field.NewInt64(tableName, "status")
	_avtOneCard.CreateTime = field.NewTime(tableName, "create_time")
	_avtOneCard.UpdateTime = field.NewTime(tableName, "update_time")
	_avtOneCard.JobNumber = field.NewString(tableName, "job_number")
	_avtOneCard.CardType = field.NewInt64(tableName, "card_type")
	_avtOneCard.Subject = field.NewString(tableName, "subject")
	_avtOneCard.Class = field.NewString(tableName, "class")
	_avtOneCard.CardUserType = field.NewInt64(tableName, "card_user_type")
	_avtOneCard.CollegeID = field.NewInt64(tableName, "college_id")
	_avtOneCard.ClassID = field.NewInt64(tableName, "class_id")

	_avtOneCard.fillFieldMap()

	return _avtOneCard
}

type avtOneCard struct {
	avtOneCardDo

	ALL          field.Asterisk
	ID           field.Int64
	CardNo       field.String
	Name         field.String
	College      field.String
	Status       field.Int64
	CreateTime   field.Time
	UpdateTime   field.Time
	JobNumber    field.String
	CardType     field.Int64
	Subject      field.String
	Class        field.String
	CardUserType field.Int64
	CollegeID    field.Int64 // 学院编号
	ClassID      field.Int64 // 班级编号

	fieldMap map[string]field.Expr
}

func (a avtOneCard) Table(newTableName string) *avtOneCard {
	a.avtOneCardDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a avtOneCard) As(alias string) *avtOneCard {
	a.avtOneCardDo.DO = *(a.avtOneCardDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *avtOneCard) updateTableName(table string) *avtOneCard {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.CardNo = field.NewString(table, "card_no")
	a.Name = field.NewString(table, "name")
	a.College = field.NewString(table, "college")
	a.Status = field.NewInt64(table, "status")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.JobNumber = field.NewString(table, "job_number")
	a.CardType = field.NewInt64(table, "card_type")
	a.Subject = field.NewString(table, "subject")
	a.Class = field.NewString(table, "class")
	a.CardUserType = field.NewInt64(table, "card_user_type")
	a.CollegeID = field.NewInt64(table, "college_id")
	a.ClassID = field.NewInt64(table, "class_id")

	a.fillFieldMap()

	return a
}

func (a *avtOneCard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *avtOneCard) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 14)
	a.fieldMap["id"] = a.ID
	a.fieldMap["card_no"] = a.CardNo
	a.fieldMap["name"] = a.Name
	a.fieldMap["college"] = a.College
	a.fieldMap["status"] = a.Status
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["job_number"] = a.JobNumber
	a.fieldMap["card_type"] = a.CardType
	a.fieldMap["subject"] = a.Subject
	a.fieldMap["class"] = a.Class
	a.fieldMap["card_user_type"] = a.CardUserType
	a.fieldMap["college_id"] = a.CollegeID
	a.fieldMap["class_id"] = a.ClassID
}

func (a avtOneCard) clone(db *gorm.DB) avtOneCard {
	a.avtOneCardDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a avtOneCard) replaceDB(db *gorm.DB) avtOneCard {
	a.avtOneCardDo.ReplaceDB(db)
	return a
}

type avtOneCardDo struct{ gen.DO }

type IAvtOneCardDo interface {
	gen.SubQuery
	Debug() IAvtOneCardDo
	WithContext(ctx context.Context) IAvtOneCardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAvtOneCardDo
	WriteDB() IAvtOneCardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAvtOneCardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAvtOneCardDo
	Not(conds ...gen.Condition) IAvtOneCardDo
	Or(conds ...gen.Condition) IAvtOneCardDo
	Select(conds ...field.Expr) IAvtOneCardDo
	Where(conds ...gen.Condition) IAvtOneCardDo
	Order(conds ...field.Expr) IAvtOneCardDo
	Distinct(cols ...field.Expr) IAvtOneCardDo
	Omit(cols ...field.Expr) IAvtOneCardDo
	Join(table schema.Tabler, on ...field.Expr) IAvtOneCardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAvtOneCardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAvtOneCardDo
	Group(cols ...field.Expr) IAvtOneCardDo
	Having(conds ...gen.Condition) IAvtOneCardDo
	Limit(limit int) IAvtOneCardDo
	Offset(offset int) IAvtOneCardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtOneCardDo
	Unscoped() IAvtOneCardDo
	Create(values ...*model.AvtOneCard) error
	CreateInBatches(values []*model.AvtOneCard, batchSize int) error
	Save(values ...*model.AvtOneCard) error
	First() (*model.AvtOneCard, error)
	Take() (*model.AvtOneCard, error)
	Last() (*model.AvtOneCard, error)
	Find() ([]*model.AvtOneCard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtOneCard, err error)
	FindInBatches(result *[]*model.AvtOneCard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AvtOneCard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAvtOneCardDo
	Assign(attrs ...field.AssignExpr) IAvtOneCardDo
	Joins(fields ...field.RelationField) IAvtOneCardDo
	Preload(fields ...field.RelationField) IAvtOneCardDo
	FirstOrInit() (*model.AvtOneCard, error)
	FirstOrCreate() (*model.AvtOneCard, error)
	FindByPage(offset int, limit int) (result []*model.AvtOneCard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAvtOneCardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a avtOneCardDo) Debug() IAvtOneCardDo {
	return a.withDO(a.DO.Debug())
}

func (a avtOneCardDo) WithContext(ctx context.Context) IAvtOneCardDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a avtOneCardDo) ReadDB() IAvtOneCardDo {
	return a.Clauses(dbresolver.Read)
}

func (a avtOneCardDo) WriteDB() IAvtOneCardDo {
	return a.Clauses(dbresolver.Write)
}

func (a avtOneCardDo) Session(config *gorm.Session) IAvtOneCardDo {
	return a.withDO(a.DO.Session(config))
}

func (a avtOneCardDo) Clauses(conds ...clause.Expression) IAvtOneCardDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a avtOneCardDo) Returning(value interface{}, columns ...string) IAvtOneCardDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a avtOneCardDo) Not(conds ...gen.Condition) IAvtOneCardDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a avtOneCardDo) Or(conds ...gen.Condition) IAvtOneCardDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a avtOneCardDo) Select(conds ...field.Expr) IAvtOneCardDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a avtOneCardDo) Where(conds ...gen.Condition) IAvtOneCardDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a avtOneCardDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAvtOneCardDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a avtOneCardDo) Order(conds ...field.Expr) IAvtOneCardDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a avtOneCardDo) Distinct(cols ...field.Expr) IAvtOneCardDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a avtOneCardDo) Omit(cols ...field.Expr) IAvtOneCardDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a avtOneCardDo) Join(table schema.Tabler, on ...field.Expr) IAvtOneCardDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a avtOneCardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAvtOneCardDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a avtOneCardDo) RightJoin(table schema.Tabler, on ...field.Expr) IAvtOneCardDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a avtOneCardDo) Group(cols ...field.Expr) IAvtOneCardDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a avtOneCardDo) Having(conds ...gen.Condition) IAvtOneCardDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a avtOneCardDo) Limit(limit int) IAvtOneCardDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a avtOneCardDo) Offset(offset int) IAvtOneCardDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a avtOneCardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtOneCardDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a avtOneCardDo) Unscoped() IAvtOneCardDo {
	return a.withDO(a.DO.Unscoped())
}

func (a avtOneCardDo) Create(values ...*model.AvtOneCard) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a avtOneCardDo) CreateInBatches(values []*model.AvtOneCard, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a avtOneCardDo) Save(values ...*model.AvtOneCard) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a avtOneCardDo) First() (*model.AvtOneCard, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtOneCard), nil
	}
}

func (a avtOneCardDo) Take() (*model.AvtOneCard, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtOneCard), nil
	}
}

func (a avtOneCardDo) Last() (*model.AvtOneCard, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtOneCard), nil
	}
}

func (a avtOneCardDo) Find() ([]*model.AvtOneCard, error) {
	result, err := a.DO.Find()
	return result.([]*model.AvtOneCard), err
}

func (a avtOneCardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtOneCard, err error) {
	buf := make([]*model.AvtOneCard, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a avtOneCardDo) FindInBatches(result *[]*model.AvtOneCard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a avtOneCardDo) Attrs(attrs ...field.AssignExpr) IAvtOneCardDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a avtOneCardDo) Assign(attrs ...field.AssignExpr) IAvtOneCardDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a avtOneCardDo) Joins(fields ...field.RelationField) IAvtOneCardDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a avtOneCardDo) Preload(fields ...field.RelationField) IAvtOneCardDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a avtOneCardDo) FirstOrInit() (*model.AvtOneCard, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtOneCard), nil
	}
}

func (a avtOneCardDo) FirstOrCreate() (*model.AvtOneCard, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtOneCard), nil
	}
}

func (a avtOneCardDo) FindByPage(offset int, limit int) (result []*model.AvtOneCard, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a avtOneCardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a avtOneCardDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a avtOneCardDo) Delete(models ...*model.AvtOneCard) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *avtOneCardDo) withDO(do gen.Dao) *avtOneCardDo {
	a.DO = *do.(*gen.DO)
	return a
}
