// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newAvtTimetableConfig(db *gorm.DB, opts ...gen.DOOption) avtTimetableConfig {
	_avtTimetableConfig := avtTimetableConfig{}

	_avtTimetableConfig.avtTimetableConfigDo.UseDB(db, opts...)
	_avtTimetableConfig.avtTimetableConfigDo.UseModel(&model.AvtTimetableConfig{})

	tableName := _avtTimetableConfig.avtTimetableConfigDo.TableName()
	_avtTimetableConfig.ALL = field.NewAsterisk(tableName)
	_avtTimetableConfig.ID = field.NewInt64(tableName, "id")
	_avtTimetableConfig.Sort = field.NewInt64(tableName, "sort")
	_avtTimetableConfig.StartTime = field.NewInt64(tableName, "start_time")
	_avtTimetableConfig.EndTime = field.NewInt64(tableName, "end_time")

	_avtTimetableConfig.fillFieldMap()

	return _avtTimetableConfig
}

type avtTimetableConfig struct {
	avtTimetableConfigDo

	ALL       field.Asterisk
	ID        field.Int64
	Sort      field.Int64
	StartTime field.Int64
	EndTime   field.Int64

	fieldMap map[string]field.Expr
}

func (a avtTimetableConfig) Table(newTableName string) *avtTimetableConfig {
	a.avtTimetableConfigDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a avtTimetableConfig) As(alias string) *avtTimetableConfig {
	a.avtTimetableConfigDo.DO = *(a.avtTimetableConfigDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *avtTimetableConfig) updateTableName(table string) *avtTimetableConfig {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Sort = field.NewInt64(table, "sort")
	a.StartTime = field.NewInt64(table, "start_time")
	a.EndTime = field.NewInt64(table, "end_time")

	a.fillFieldMap()

	return a
}

func (a *avtTimetableConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *avtTimetableConfig) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["id"] = a.ID
	a.fieldMap["sort"] = a.Sort
	a.fieldMap["start_time"] = a.StartTime
	a.fieldMap["end_time"] = a.EndTime
}

func (a avtTimetableConfig) clone(db *gorm.DB) avtTimetableConfig {
	a.avtTimetableConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a avtTimetableConfig) replaceDB(db *gorm.DB) avtTimetableConfig {
	a.avtTimetableConfigDo.ReplaceDB(db)
	return a
}

type avtTimetableConfigDo struct{ gen.DO }

type IAvtTimetableConfigDo interface {
	gen.SubQuery
	Debug() IAvtTimetableConfigDo
	WithContext(ctx context.Context) IAvtTimetableConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAvtTimetableConfigDo
	WriteDB() IAvtTimetableConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAvtTimetableConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAvtTimetableConfigDo
	Not(conds ...gen.Condition) IAvtTimetableConfigDo
	Or(conds ...gen.Condition) IAvtTimetableConfigDo
	Select(conds ...field.Expr) IAvtTimetableConfigDo
	Where(conds ...gen.Condition) IAvtTimetableConfigDo
	Order(conds ...field.Expr) IAvtTimetableConfigDo
	Distinct(cols ...field.Expr) IAvtTimetableConfigDo
	Omit(cols ...field.Expr) IAvtTimetableConfigDo
	Join(table schema.Tabler, on ...field.Expr) IAvtTimetableConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAvtTimetableConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAvtTimetableConfigDo
	Group(cols ...field.Expr) IAvtTimetableConfigDo
	Having(conds ...gen.Condition) IAvtTimetableConfigDo
	Limit(limit int) IAvtTimetableConfigDo
	Offset(offset int) IAvtTimetableConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtTimetableConfigDo
	Unscoped() IAvtTimetableConfigDo
	Create(values ...*model.AvtTimetableConfig) error
	CreateInBatches(values []*model.AvtTimetableConfig, batchSize int) error
	Save(values ...*model.AvtTimetableConfig) error
	First() (*model.AvtTimetableConfig, error)
	Take() (*model.AvtTimetableConfig, error)
	Last() (*model.AvtTimetableConfig, error)
	Find() ([]*model.AvtTimetableConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtTimetableConfig, err error)
	FindInBatches(result *[]*model.AvtTimetableConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AvtTimetableConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAvtTimetableConfigDo
	Assign(attrs ...field.AssignExpr) IAvtTimetableConfigDo
	Joins(fields ...field.RelationField) IAvtTimetableConfigDo
	Preload(fields ...field.RelationField) IAvtTimetableConfigDo
	FirstOrInit() (*model.AvtTimetableConfig, error)
	FirstOrCreate() (*model.AvtTimetableConfig, error)
	FindByPage(offset int, limit int) (result []*model.AvtTimetableConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAvtTimetableConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a avtTimetableConfigDo) Debug() IAvtTimetableConfigDo {
	return a.withDO(a.DO.Debug())
}

func (a avtTimetableConfigDo) WithContext(ctx context.Context) IAvtTimetableConfigDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a avtTimetableConfigDo) ReadDB() IAvtTimetableConfigDo {
	return a.Clauses(dbresolver.Read)
}

func (a avtTimetableConfigDo) WriteDB() IAvtTimetableConfigDo {
	return a.Clauses(dbresolver.Write)
}

func (a avtTimetableConfigDo) Session(config *gorm.Session) IAvtTimetableConfigDo {
	return a.withDO(a.DO.Session(config))
}

func (a avtTimetableConfigDo) Clauses(conds ...clause.Expression) IAvtTimetableConfigDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a avtTimetableConfigDo) Returning(value interface{}, columns ...string) IAvtTimetableConfigDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a avtTimetableConfigDo) Not(conds ...gen.Condition) IAvtTimetableConfigDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a avtTimetableConfigDo) Or(conds ...gen.Condition) IAvtTimetableConfigDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a avtTimetableConfigDo) Select(conds ...field.Expr) IAvtTimetableConfigDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a avtTimetableConfigDo) Where(conds ...gen.Condition) IAvtTimetableConfigDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a avtTimetableConfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAvtTimetableConfigDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a avtTimetableConfigDo) Order(conds ...field.Expr) IAvtTimetableConfigDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a avtTimetableConfigDo) Distinct(cols ...field.Expr) IAvtTimetableConfigDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a avtTimetableConfigDo) Omit(cols ...field.Expr) IAvtTimetableConfigDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a avtTimetableConfigDo) Join(table schema.Tabler, on ...field.Expr) IAvtTimetableConfigDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a avtTimetableConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAvtTimetableConfigDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a avtTimetableConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IAvtTimetableConfigDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a avtTimetableConfigDo) Group(cols ...field.Expr) IAvtTimetableConfigDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a avtTimetableConfigDo) Having(conds ...gen.Condition) IAvtTimetableConfigDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a avtTimetableConfigDo) Limit(limit int) IAvtTimetableConfigDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a avtTimetableConfigDo) Offset(offset int) IAvtTimetableConfigDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a avtTimetableConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtTimetableConfigDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a avtTimetableConfigDo) Unscoped() IAvtTimetableConfigDo {
	return a.withDO(a.DO.Unscoped())
}

func (a avtTimetableConfigDo) Create(values ...*model.AvtTimetableConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a avtTimetableConfigDo) CreateInBatches(values []*model.AvtTimetableConfig, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a avtTimetableConfigDo) Save(values ...*model.AvtTimetableConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a avtTimetableConfigDo) First() (*model.AvtTimetableConfig, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtTimetableConfig), nil
	}
}

func (a avtTimetableConfigDo) Take() (*model.AvtTimetableConfig, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtTimetableConfig), nil
	}
}

func (a avtTimetableConfigDo) Last() (*model.AvtTimetableConfig, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtTimetableConfig), nil
	}
}

func (a avtTimetableConfigDo) Find() ([]*model.AvtTimetableConfig, error) {
	result, err := a.DO.Find()
	return result.([]*model.AvtTimetableConfig), err
}

func (a avtTimetableConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtTimetableConfig, err error) {
	buf := make([]*model.AvtTimetableConfig, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a avtTimetableConfigDo) FindInBatches(result *[]*model.AvtTimetableConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a avtTimetableConfigDo) Attrs(attrs ...field.AssignExpr) IAvtTimetableConfigDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a avtTimetableConfigDo) Assign(attrs ...field.AssignExpr) IAvtTimetableConfigDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a avtTimetableConfigDo) Joins(fields ...field.RelationField) IAvtTimetableConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a avtTimetableConfigDo) Preload(fields ...field.RelationField) IAvtTimetableConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a avtTimetableConfigDo) FirstOrInit() (*model.AvtTimetableConfig, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtTimetableConfig), nil
	}
}

func (a avtTimetableConfigDo) FirstOrCreate() (*model.AvtTimetableConfig, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtTimetableConfig), nil
	}
}

func (a avtTimetableConfigDo) FindByPage(offset int, limit int) (result []*model.AvtTimetableConfig, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a avtTimetableConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a avtTimetableConfigDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a avtTimetableConfigDo) Delete(models ...*model.AvtTimetableConfig) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *avtTimetableConfigDo) withDO(do gen.Dao) *avtTimetableConfigDo {
	a.DO = *do.(*gen.DO)
	return a
}
