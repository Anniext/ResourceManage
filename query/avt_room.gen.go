// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newAvtRoom(db *gorm.DB, opts ...gen.DOOption) avtRoom {
	_avtRoom := avtRoom{}

	_avtRoom.avtRoomDo.UseDB(db, opts...)
	_avtRoom.avtRoomDo.UseModel(&model.AvtRoom{})

	tableName := _avtRoom.avtRoomDo.TableName()
	_avtRoom.ALL = field.NewAsterisk(tableName)
	_avtRoom.ID = field.NewInt64(tableName, "id")
	_avtRoom.RoomType = field.NewInt64(tableName, "room_type")
	_avtRoom.Name = field.NewString(tableName, "name")
	_avtRoom.FloorID = field.NewInt64(tableName, "floor_id")
	_avtRoom.BuildingID = field.NewInt64(tableName, "building_id")
	_avtRoom.IsDelete = field.NewInt64(tableName, "is_delete")
	_avtRoom.IP = field.NewString(tableName, "ip")
	_avtRoom.K4Version = field.NewString(tableName, "k4_version")
	_avtRoom.K4Md5 = field.NewString(tableName, "k4_md5")
	_avtRoom.BinMd5 = field.NewString(tableName, "bin_md5")
	_avtRoom.LastBinMd5 = field.NewString(tableName, "last_bin_md5")
	_avtRoom.LastK4Md5 = field.NewString(tableName, "last_k4_md5")
	_avtRoom.System = field.NewString(tableName, "system")
	_avtRoom.LiveStatus = field.NewInt64(tableName, "live_status")
	_avtRoom.SeatNum = field.NewInt64(tableName, "seat_num")
	_avtRoom.ExamSeatNum = field.NewInt64(tableName, "exam_seat_num")
	_avtRoom.RoomCode = field.NewString(tableName, "room_code")

	_avtRoom.fillFieldMap()

	return _avtRoom
}

type avtRoom struct {
	avtRoomDo

	ALL         field.Asterisk
	ID          field.Int64
	RoomType    field.Int64
	Name        field.String
	FloorID     field.Int64
	BuildingID  field.Int64
	IsDelete    field.Int64 // 0-未删除；1-已删除
	IP          field.String
	K4Version   field.String
	K4Md5       field.String
	BinMd5      field.String
	LastBinMd5  field.String // 最新上传的md5
	LastK4Md5   field.String // 最新上传的k4 md5
	System      field.String // 中控系统版本：wince，linux
	LiveStatus  field.Int64
	SeatNum     field.Int64  // 座位数
	ExamSeatNum field.Int64  // 考试座位数
	RoomCode    field.String // 教室编号

	fieldMap map[string]field.Expr
}

func (a avtRoom) Table(newTableName string) *avtRoom {
	a.avtRoomDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a avtRoom) As(alias string) *avtRoom {
	a.avtRoomDo.DO = *(a.avtRoomDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *avtRoom) updateTableName(table string) *avtRoom {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.RoomType = field.NewInt64(table, "room_type")
	a.Name = field.NewString(table, "name")
	a.FloorID = field.NewInt64(table, "floor_id")
	a.BuildingID = field.NewInt64(table, "building_id")
	a.IsDelete = field.NewInt64(table, "is_delete")
	a.IP = field.NewString(table, "ip")
	a.K4Version = field.NewString(table, "k4_version")
	a.K4Md5 = field.NewString(table, "k4_md5")
	a.BinMd5 = field.NewString(table, "bin_md5")
	a.LastBinMd5 = field.NewString(table, "last_bin_md5")
	a.LastK4Md5 = field.NewString(table, "last_k4_md5")
	a.System = field.NewString(table, "system")
	a.LiveStatus = field.NewInt64(table, "live_status")
	a.SeatNum = field.NewInt64(table, "seat_num")
	a.ExamSeatNum = field.NewInt64(table, "exam_seat_num")
	a.RoomCode = field.NewString(table, "room_code")

	a.fillFieldMap()

	return a
}

func (a *avtRoom) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *avtRoom) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 17)
	a.fieldMap["id"] = a.ID
	a.fieldMap["room_type"] = a.RoomType
	a.fieldMap["name"] = a.Name
	a.fieldMap["floor_id"] = a.FloorID
	a.fieldMap["building_id"] = a.BuildingID
	a.fieldMap["is_delete"] = a.IsDelete
	a.fieldMap["ip"] = a.IP
	a.fieldMap["k4_version"] = a.K4Version
	a.fieldMap["k4_md5"] = a.K4Md5
	a.fieldMap["bin_md5"] = a.BinMd5
	a.fieldMap["last_bin_md5"] = a.LastBinMd5
	a.fieldMap["last_k4_md5"] = a.LastK4Md5
	a.fieldMap["system"] = a.System
	a.fieldMap["live_status"] = a.LiveStatus
	a.fieldMap["seat_num"] = a.SeatNum
	a.fieldMap["exam_seat_num"] = a.ExamSeatNum
	a.fieldMap["room_code"] = a.RoomCode
}

func (a avtRoom) clone(db *gorm.DB) avtRoom {
	a.avtRoomDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a avtRoom) replaceDB(db *gorm.DB) avtRoom {
	a.avtRoomDo.ReplaceDB(db)
	return a
}

type avtRoomDo struct{ gen.DO }

type IAvtRoomDo interface {
	gen.SubQuery
	Debug() IAvtRoomDo
	WithContext(ctx context.Context) IAvtRoomDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAvtRoomDo
	WriteDB() IAvtRoomDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAvtRoomDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAvtRoomDo
	Not(conds ...gen.Condition) IAvtRoomDo
	Or(conds ...gen.Condition) IAvtRoomDo
	Select(conds ...field.Expr) IAvtRoomDo
	Where(conds ...gen.Condition) IAvtRoomDo
	Order(conds ...field.Expr) IAvtRoomDo
	Distinct(cols ...field.Expr) IAvtRoomDo
	Omit(cols ...field.Expr) IAvtRoomDo
	Join(table schema.Tabler, on ...field.Expr) IAvtRoomDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAvtRoomDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAvtRoomDo
	Group(cols ...field.Expr) IAvtRoomDo
	Having(conds ...gen.Condition) IAvtRoomDo
	Limit(limit int) IAvtRoomDo
	Offset(offset int) IAvtRoomDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtRoomDo
	Unscoped() IAvtRoomDo
	Create(values ...*model.AvtRoom) error
	CreateInBatches(values []*model.AvtRoom, batchSize int) error
	Save(values ...*model.AvtRoom) error
	First() (*model.AvtRoom, error)
	Take() (*model.AvtRoom, error)
	Last() (*model.AvtRoom, error)
	Find() ([]*model.AvtRoom, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtRoom, err error)
	FindInBatches(result *[]*model.AvtRoom, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AvtRoom) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAvtRoomDo
	Assign(attrs ...field.AssignExpr) IAvtRoomDo
	Joins(fields ...field.RelationField) IAvtRoomDo
	Preload(fields ...field.RelationField) IAvtRoomDo
	FirstOrInit() (*model.AvtRoom, error)
	FirstOrCreate() (*model.AvtRoom, error)
	FindByPage(offset int, limit int) (result []*model.AvtRoom, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAvtRoomDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a avtRoomDo) Debug() IAvtRoomDo {
	return a.withDO(a.DO.Debug())
}

func (a avtRoomDo) WithContext(ctx context.Context) IAvtRoomDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a avtRoomDo) ReadDB() IAvtRoomDo {
	return a.Clauses(dbresolver.Read)
}

func (a avtRoomDo) WriteDB() IAvtRoomDo {
	return a.Clauses(dbresolver.Write)
}

func (a avtRoomDo) Session(config *gorm.Session) IAvtRoomDo {
	return a.withDO(a.DO.Session(config))
}

func (a avtRoomDo) Clauses(conds ...clause.Expression) IAvtRoomDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a avtRoomDo) Returning(value interface{}, columns ...string) IAvtRoomDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a avtRoomDo) Not(conds ...gen.Condition) IAvtRoomDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a avtRoomDo) Or(conds ...gen.Condition) IAvtRoomDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a avtRoomDo) Select(conds ...field.Expr) IAvtRoomDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a avtRoomDo) Where(conds ...gen.Condition) IAvtRoomDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a avtRoomDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAvtRoomDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a avtRoomDo) Order(conds ...field.Expr) IAvtRoomDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a avtRoomDo) Distinct(cols ...field.Expr) IAvtRoomDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a avtRoomDo) Omit(cols ...field.Expr) IAvtRoomDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a avtRoomDo) Join(table schema.Tabler, on ...field.Expr) IAvtRoomDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a avtRoomDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAvtRoomDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a avtRoomDo) RightJoin(table schema.Tabler, on ...field.Expr) IAvtRoomDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a avtRoomDo) Group(cols ...field.Expr) IAvtRoomDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a avtRoomDo) Having(conds ...gen.Condition) IAvtRoomDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a avtRoomDo) Limit(limit int) IAvtRoomDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a avtRoomDo) Offset(offset int) IAvtRoomDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a avtRoomDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtRoomDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a avtRoomDo) Unscoped() IAvtRoomDo {
	return a.withDO(a.DO.Unscoped())
}

func (a avtRoomDo) Create(values ...*model.AvtRoom) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a avtRoomDo) CreateInBatches(values []*model.AvtRoom, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a avtRoomDo) Save(values ...*model.AvtRoom) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a avtRoomDo) First() (*model.AvtRoom, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtRoom), nil
	}
}

func (a avtRoomDo) Take() (*model.AvtRoom, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtRoom), nil
	}
}

func (a avtRoomDo) Last() (*model.AvtRoom, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtRoom), nil
	}
}

func (a avtRoomDo) Find() ([]*model.AvtRoom, error) {
	result, err := a.DO.Find()
	return result.([]*model.AvtRoom), err
}

func (a avtRoomDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtRoom, err error) {
	buf := make([]*model.AvtRoom, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a avtRoomDo) FindInBatches(result *[]*model.AvtRoom, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a avtRoomDo) Attrs(attrs ...field.AssignExpr) IAvtRoomDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a avtRoomDo) Assign(attrs ...field.AssignExpr) IAvtRoomDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a avtRoomDo) Joins(fields ...field.RelationField) IAvtRoomDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a avtRoomDo) Preload(fields ...field.RelationField) IAvtRoomDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a avtRoomDo) FirstOrInit() (*model.AvtRoom, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtRoom), nil
	}
}

func (a avtRoomDo) FirstOrCreate() (*model.AvtRoom, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtRoom), nil
	}
}

func (a avtRoomDo) FindByPage(offset int, limit int) (result []*model.AvtRoom, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a avtRoomDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a avtRoomDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a avtRoomDo) Delete(models ...*model.AvtRoom) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *avtRoomDo) withDO(do gen.Dao) *avtRoomDo {
	a.DO = *do.(*gen.DO)
	return a
}
