// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newSysRoleBackenduserRel(db *gorm.DB, opts ...gen.DOOption) sysRoleBackenduserRel {
	_sysRoleBackenduserRel := sysRoleBackenduserRel{}

	_sysRoleBackenduserRel.sysRoleBackenduserRelDo.UseDB(db, opts...)
	_sysRoleBackenduserRel.sysRoleBackenduserRelDo.UseModel(&model.SysRoleBackenduserRel{})

	tableName := _sysRoleBackenduserRel.sysRoleBackenduserRelDo.TableName()
	_sysRoleBackenduserRel.ALL = field.NewAsterisk(tableName)
	_sysRoleBackenduserRel.ID = field.NewInt64(tableName, "id")
	_sysRoleBackenduserRel.RoleID = field.NewInt64(tableName, "role_id")
	_sysRoleBackenduserRel.BackendUserID = field.NewInt64(tableName, "backend_user_id")
	_sysRoleBackenduserRel.Created = field.NewTime(tableName, "created")

	_sysRoleBackenduserRel.fillFieldMap()

	return _sysRoleBackenduserRel
}

type sysRoleBackenduserRel struct {
	sysRoleBackenduserRelDo

	ALL           field.Asterisk
	ID            field.Int64
	RoleID        field.Int64
	BackendUserID field.Int64
	Created       field.Time

	fieldMap map[string]field.Expr
}

func (s sysRoleBackenduserRel) Table(newTableName string) *sysRoleBackenduserRel {
	s.sysRoleBackenduserRelDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysRoleBackenduserRel) As(alias string) *sysRoleBackenduserRel {
	s.sysRoleBackenduserRelDo.DO = *(s.sysRoleBackenduserRelDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysRoleBackenduserRel) updateTableName(table string) *sysRoleBackenduserRel {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.RoleID = field.NewInt64(table, "role_id")
	s.BackendUserID = field.NewInt64(table, "backend_user_id")
	s.Created = field.NewTime(table, "created")

	s.fillFieldMap()

	return s
}

func (s *sysRoleBackenduserRel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysRoleBackenduserRel) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["role_id"] = s.RoleID
	s.fieldMap["backend_user_id"] = s.BackendUserID
	s.fieldMap["created"] = s.Created
}

func (s sysRoleBackenduserRel) clone(db *gorm.DB) sysRoleBackenduserRel {
	s.sysRoleBackenduserRelDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysRoleBackenduserRel) replaceDB(db *gorm.DB) sysRoleBackenduserRel {
	s.sysRoleBackenduserRelDo.ReplaceDB(db)
	return s
}

type sysRoleBackenduserRelDo struct{ gen.DO }

type ISysRoleBackenduserRelDo interface {
	gen.SubQuery
	Debug() ISysRoleBackenduserRelDo
	WithContext(ctx context.Context) ISysRoleBackenduserRelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysRoleBackenduserRelDo
	WriteDB() ISysRoleBackenduserRelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysRoleBackenduserRelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysRoleBackenduserRelDo
	Not(conds ...gen.Condition) ISysRoleBackenduserRelDo
	Or(conds ...gen.Condition) ISysRoleBackenduserRelDo
	Select(conds ...field.Expr) ISysRoleBackenduserRelDo
	Where(conds ...gen.Condition) ISysRoleBackenduserRelDo
	Order(conds ...field.Expr) ISysRoleBackenduserRelDo
	Distinct(cols ...field.Expr) ISysRoleBackenduserRelDo
	Omit(cols ...field.Expr) ISysRoleBackenduserRelDo
	Join(table schema.Tabler, on ...field.Expr) ISysRoleBackenduserRelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysRoleBackenduserRelDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysRoleBackenduserRelDo
	Group(cols ...field.Expr) ISysRoleBackenduserRelDo
	Having(conds ...gen.Condition) ISysRoleBackenduserRelDo
	Limit(limit int) ISysRoleBackenduserRelDo
	Offset(offset int) ISysRoleBackenduserRelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysRoleBackenduserRelDo
	Unscoped() ISysRoleBackenduserRelDo
	Create(values ...*model.SysRoleBackenduserRel) error
	CreateInBatches(values []*model.SysRoleBackenduserRel, batchSize int) error
	Save(values ...*model.SysRoleBackenduserRel) error
	First() (*model.SysRoleBackenduserRel, error)
	Take() (*model.SysRoleBackenduserRel, error)
	Last() (*model.SysRoleBackenduserRel, error)
	Find() ([]*model.SysRoleBackenduserRel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysRoleBackenduserRel, err error)
	FindInBatches(result *[]*model.SysRoleBackenduserRel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysRoleBackenduserRel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysRoleBackenduserRelDo
	Assign(attrs ...field.AssignExpr) ISysRoleBackenduserRelDo
	Joins(fields ...field.RelationField) ISysRoleBackenduserRelDo
	Preload(fields ...field.RelationField) ISysRoleBackenduserRelDo
	FirstOrInit() (*model.SysRoleBackenduserRel, error)
	FirstOrCreate() (*model.SysRoleBackenduserRel, error)
	FindByPage(offset int, limit int) (result []*model.SysRoleBackenduserRel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysRoleBackenduserRelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysRoleBackenduserRelDo) Debug() ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.Debug())
}

func (s sysRoleBackenduserRelDo) WithContext(ctx context.Context) ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysRoleBackenduserRelDo) ReadDB() ISysRoleBackenduserRelDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysRoleBackenduserRelDo) WriteDB() ISysRoleBackenduserRelDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysRoleBackenduserRelDo) Session(config *gorm.Session) ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysRoleBackenduserRelDo) Clauses(conds ...clause.Expression) ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysRoleBackenduserRelDo) Returning(value interface{}, columns ...string) ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysRoleBackenduserRelDo) Not(conds ...gen.Condition) ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysRoleBackenduserRelDo) Or(conds ...gen.Condition) ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysRoleBackenduserRelDo) Select(conds ...field.Expr) ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysRoleBackenduserRelDo) Where(conds ...gen.Condition) ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysRoleBackenduserRelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysRoleBackenduserRelDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysRoleBackenduserRelDo) Order(conds ...field.Expr) ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysRoleBackenduserRelDo) Distinct(cols ...field.Expr) ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysRoleBackenduserRelDo) Omit(cols ...field.Expr) ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysRoleBackenduserRelDo) Join(table schema.Tabler, on ...field.Expr) ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysRoleBackenduserRelDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysRoleBackenduserRelDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysRoleBackenduserRelDo) Group(cols ...field.Expr) ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysRoleBackenduserRelDo) Having(conds ...gen.Condition) ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysRoleBackenduserRelDo) Limit(limit int) ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysRoleBackenduserRelDo) Offset(offset int) ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysRoleBackenduserRelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysRoleBackenduserRelDo) Unscoped() ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysRoleBackenduserRelDo) Create(values ...*model.SysRoleBackenduserRel) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysRoleBackenduserRelDo) CreateInBatches(values []*model.SysRoleBackenduserRel, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysRoleBackenduserRelDo) Save(values ...*model.SysRoleBackenduserRel) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysRoleBackenduserRelDo) First() (*model.SysRoleBackenduserRel, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRoleBackenduserRel), nil
	}
}

func (s sysRoleBackenduserRelDo) Take() (*model.SysRoleBackenduserRel, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRoleBackenduserRel), nil
	}
}

func (s sysRoleBackenduserRelDo) Last() (*model.SysRoleBackenduserRel, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRoleBackenduserRel), nil
	}
}

func (s sysRoleBackenduserRelDo) Find() ([]*model.SysRoleBackenduserRel, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysRoleBackenduserRel), err
}

func (s sysRoleBackenduserRelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysRoleBackenduserRel, err error) {
	buf := make([]*model.SysRoleBackenduserRel, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysRoleBackenduserRelDo) FindInBatches(result *[]*model.SysRoleBackenduserRel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysRoleBackenduserRelDo) Attrs(attrs ...field.AssignExpr) ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysRoleBackenduserRelDo) Assign(attrs ...field.AssignExpr) ISysRoleBackenduserRelDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysRoleBackenduserRelDo) Joins(fields ...field.RelationField) ISysRoleBackenduserRelDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysRoleBackenduserRelDo) Preload(fields ...field.RelationField) ISysRoleBackenduserRelDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysRoleBackenduserRelDo) FirstOrInit() (*model.SysRoleBackenduserRel, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRoleBackenduserRel), nil
	}
}

func (s sysRoleBackenduserRelDo) FirstOrCreate() (*model.SysRoleBackenduserRel, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRoleBackenduserRel), nil
	}
}

func (s sysRoleBackenduserRelDo) FindByPage(offset int, limit int) (result []*model.SysRoleBackenduserRel, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysRoleBackenduserRelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysRoleBackenduserRelDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysRoleBackenduserRelDo) Delete(models ...*model.SysRoleBackenduserRel) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysRoleBackenduserRelDo) withDO(do gen.Dao) *sysRoleBackenduserRelDo {
	s.DO = *do.(*gen.DO)
	return s
}
