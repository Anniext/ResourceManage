// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ResourceManage/model"
)

func newAvtPayCardLog(db *gorm.DB, opts ...gen.DOOption) avtPayCardLog {
	_avtPayCardLog := avtPayCardLog{}

	_avtPayCardLog.avtPayCardLogDo.UseDB(db, opts...)
	_avtPayCardLog.avtPayCardLogDo.UseModel(&model.AvtPayCardLog{})

	tableName := _avtPayCardLog.avtPayCardLogDo.TableName()
	_avtPayCardLog.ALL = field.NewAsterisk(tableName)
	_avtPayCardLog.ID = field.NewInt64(tableName, "id")
	_avtPayCardLog.CardNo = field.NewString(tableName, "card_no")
	_avtPayCardLog.ActionTime = field.NewString(tableName, "action_time")
	_avtPayCardLog.Result = field.NewInt64(tableName, "result")
	_avtPayCardLog.RoomID = field.NewInt64(tableName, "room_id")

	_avtPayCardLog.fillFieldMap()

	return _avtPayCardLog
}

type avtPayCardLog struct {
	avtPayCardLogDo

	ALL        field.Asterisk
	ID         field.Int64
	CardNo     field.String
	ActionTime field.String
	Result     field.Int64 // 0刷卡成功  1无效卡  2时间错误  3其他错误
	RoomID     field.Int64

	fieldMap map[string]field.Expr
}

func (a avtPayCardLog) Table(newTableName string) *avtPayCardLog {
	a.avtPayCardLogDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a avtPayCardLog) As(alias string) *avtPayCardLog {
	a.avtPayCardLogDo.DO = *(a.avtPayCardLogDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *avtPayCardLog) updateTableName(table string) *avtPayCardLog {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.CardNo = field.NewString(table, "card_no")
	a.ActionTime = field.NewString(table, "action_time")
	a.Result = field.NewInt64(table, "result")
	a.RoomID = field.NewInt64(table, "room_id")

	a.fillFieldMap()

	return a
}

func (a *avtPayCardLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *avtPayCardLog) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["id"] = a.ID
	a.fieldMap["card_no"] = a.CardNo
	a.fieldMap["action_time"] = a.ActionTime
	a.fieldMap["result"] = a.Result
	a.fieldMap["room_id"] = a.RoomID
}

func (a avtPayCardLog) clone(db *gorm.DB) avtPayCardLog {
	a.avtPayCardLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a avtPayCardLog) replaceDB(db *gorm.DB) avtPayCardLog {
	a.avtPayCardLogDo.ReplaceDB(db)
	return a
}

type avtPayCardLogDo struct{ gen.DO }

type IAvtPayCardLogDo interface {
	gen.SubQuery
	Debug() IAvtPayCardLogDo
	WithContext(ctx context.Context) IAvtPayCardLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAvtPayCardLogDo
	WriteDB() IAvtPayCardLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAvtPayCardLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAvtPayCardLogDo
	Not(conds ...gen.Condition) IAvtPayCardLogDo
	Or(conds ...gen.Condition) IAvtPayCardLogDo
	Select(conds ...field.Expr) IAvtPayCardLogDo
	Where(conds ...gen.Condition) IAvtPayCardLogDo
	Order(conds ...field.Expr) IAvtPayCardLogDo
	Distinct(cols ...field.Expr) IAvtPayCardLogDo
	Omit(cols ...field.Expr) IAvtPayCardLogDo
	Join(table schema.Tabler, on ...field.Expr) IAvtPayCardLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAvtPayCardLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAvtPayCardLogDo
	Group(cols ...field.Expr) IAvtPayCardLogDo
	Having(conds ...gen.Condition) IAvtPayCardLogDo
	Limit(limit int) IAvtPayCardLogDo
	Offset(offset int) IAvtPayCardLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtPayCardLogDo
	Unscoped() IAvtPayCardLogDo
	Create(values ...*model.AvtPayCardLog) error
	CreateInBatches(values []*model.AvtPayCardLog, batchSize int) error
	Save(values ...*model.AvtPayCardLog) error
	First() (*model.AvtPayCardLog, error)
	Take() (*model.AvtPayCardLog, error)
	Last() (*model.AvtPayCardLog, error)
	Find() ([]*model.AvtPayCardLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtPayCardLog, err error)
	FindInBatches(result *[]*model.AvtPayCardLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AvtPayCardLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAvtPayCardLogDo
	Assign(attrs ...field.AssignExpr) IAvtPayCardLogDo
	Joins(fields ...field.RelationField) IAvtPayCardLogDo
	Preload(fields ...field.RelationField) IAvtPayCardLogDo
	FirstOrInit() (*model.AvtPayCardLog, error)
	FirstOrCreate() (*model.AvtPayCardLog, error)
	FindByPage(offset int, limit int) (result []*model.AvtPayCardLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAvtPayCardLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a avtPayCardLogDo) Debug() IAvtPayCardLogDo {
	return a.withDO(a.DO.Debug())
}

func (a avtPayCardLogDo) WithContext(ctx context.Context) IAvtPayCardLogDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a avtPayCardLogDo) ReadDB() IAvtPayCardLogDo {
	return a.Clauses(dbresolver.Read)
}

func (a avtPayCardLogDo) WriteDB() IAvtPayCardLogDo {
	return a.Clauses(dbresolver.Write)
}

func (a avtPayCardLogDo) Session(config *gorm.Session) IAvtPayCardLogDo {
	return a.withDO(a.DO.Session(config))
}

func (a avtPayCardLogDo) Clauses(conds ...clause.Expression) IAvtPayCardLogDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a avtPayCardLogDo) Returning(value interface{}, columns ...string) IAvtPayCardLogDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a avtPayCardLogDo) Not(conds ...gen.Condition) IAvtPayCardLogDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a avtPayCardLogDo) Or(conds ...gen.Condition) IAvtPayCardLogDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a avtPayCardLogDo) Select(conds ...field.Expr) IAvtPayCardLogDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a avtPayCardLogDo) Where(conds ...gen.Condition) IAvtPayCardLogDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a avtPayCardLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAvtPayCardLogDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a avtPayCardLogDo) Order(conds ...field.Expr) IAvtPayCardLogDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a avtPayCardLogDo) Distinct(cols ...field.Expr) IAvtPayCardLogDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a avtPayCardLogDo) Omit(cols ...field.Expr) IAvtPayCardLogDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a avtPayCardLogDo) Join(table schema.Tabler, on ...field.Expr) IAvtPayCardLogDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a avtPayCardLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAvtPayCardLogDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a avtPayCardLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IAvtPayCardLogDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a avtPayCardLogDo) Group(cols ...field.Expr) IAvtPayCardLogDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a avtPayCardLogDo) Having(conds ...gen.Condition) IAvtPayCardLogDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a avtPayCardLogDo) Limit(limit int) IAvtPayCardLogDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a avtPayCardLogDo) Offset(offset int) IAvtPayCardLogDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a avtPayCardLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAvtPayCardLogDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a avtPayCardLogDo) Unscoped() IAvtPayCardLogDo {
	return a.withDO(a.DO.Unscoped())
}

func (a avtPayCardLogDo) Create(values ...*model.AvtPayCardLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a avtPayCardLogDo) CreateInBatches(values []*model.AvtPayCardLog, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a avtPayCardLogDo) Save(values ...*model.AvtPayCardLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a avtPayCardLogDo) First() (*model.AvtPayCardLog, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtPayCardLog), nil
	}
}

func (a avtPayCardLogDo) Take() (*model.AvtPayCardLog, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtPayCardLog), nil
	}
}

func (a avtPayCardLogDo) Last() (*model.AvtPayCardLog, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtPayCardLog), nil
	}
}

func (a avtPayCardLogDo) Find() ([]*model.AvtPayCardLog, error) {
	result, err := a.DO.Find()
	return result.([]*model.AvtPayCardLog), err
}

func (a avtPayCardLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AvtPayCardLog, err error) {
	buf := make([]*model.AvtPayCardLog, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a avtPayCardLogDo) FindInBatches(result *[]*model.AvtPayCardLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a avtPayCardLogDo) Attrs(attrs ...field.AssignExpr) IAvtPayCardLogDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a avtPayCardLogDo) Assign(attrs ...field.AssignExpr) IAvtPayCardLogDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a avtPayCardLogDo) Joins(fields ...field.RelationField) IAvtPayCardLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a avtPayCardLogDo) Preload(fields ...field.RelationField) IAvtPayCardLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a avtPayCardLogDo) FirstOrInit() (*model.AvtPayCardLog, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtPayCardLog), nil
	}
}

func (a avtPayCardLogDo) FirstOrCreate() (*model.AvtPayCardLog, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AvtPayCardLog), nil
	}
}

func (a avtPayCardLogDo) FindByPage(offset int, limit int) (result []*model.AvtPayCardLog, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a avtPayCardLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a avtPayCardLogDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a avtPayCardLogDo) Delete(models ...*model.AvtPayCardLog) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *avtPayCardLogDo) withDO(do gen.Dao) *avtPayCardLogDo {
	a.DO = *do.(*gen.DO)
	return a
}
